<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue2.0学习—路由</title>
      <link href="/undefined/38900.html"/>
      <url>/undefined/38900.html</url>
      
        <content type="html"><![CDATA[<h2 id="路由的简介"><a href="#路由的简介" class="headerlink" title="路由的简介"></a>路由的简介</h2><h3 id="1-vue-router的理解"><a href="#1-vue-router的理解" class="headerlink" title="1. vue-router的理解"></a>1. vue-router的理解</h3><p>​    vue 的一个插件库，专门用来实现 SPA 应用</p><blockquote><p><strong>对 SPA 应用的理解</strong>：</p><ol><li><p>单页 Web 应用（single page web application，SPA）。 </p></li><li><p>整个应用只有<strong>一个完整的页面</strong>。 </p></li><li><p>点击页面中的导航链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新。</strong> </p></li><li><p>数据需要通过 ajax 请求获取。</p></li></ol></blockquote><h3 id="2-路由的理解"><a href="#2-路由的理解" class="headerlink" title="2. 路由的理解"></a>2. 路由的理解</h3><h4 id="1-什么是路由？"><a href="#1-什么是路由？" class="headerlink" title="1. 什么是路由？"></a>1. 什么是路由？</h4><ol><li><p>一个路由就是一组映射关系（key - value） </p></li><li><p>key 为路径, value 可能是 function 或 component</p></li></ol><h4 id="2-路由分类"><a href="#2-路由分类" class="headerlink" title="2.路由分类"></a>2.路由分类</h4><ol><li><p>后端路由： </p><p>1）理解：value 是 function, 用于处理客户端提交的请求。 </p><p>2）工作过程：服务器接收到一个请求时, 根据<strong>请求路径</strong>找到匹配的<strong>函数</strong></p></li></ol><p>来处理请求, 返回响应数据。 </p><ol start="2"><li><p>前端路由： </p><p>1）理解：value 是 component，用于展示页面内容。 </p><p>2）工作过程：当浏览器的路径改变时, 对应的组件就会显示。</p></li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//引入Luyou组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../componrnts/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment" spellcheck="true">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Home    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li><p>指定展示位置</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h3><ol><li>路由组件通常存放在<code>page</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</li></ol><h2 id="多级路由（嵌套路由）"><a href="#多级路由（嵌套路由）" class="headerlink" title="多级路由（嵌套路由）"></a>多级路由（嵌套路由）</h2><ol><li><p>配置路由规则，使用children配置项：</p><pre class=" language-js"><code class="language-js">routes<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>        children<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//通过children配置子级路由</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//此处一定不要写：/news</span>                component<span class="token punctuation">:</span>News            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//此处一定不要写：/message</span>                component<span class="token punctuation">:</span>Message            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/news<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>News<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h2><ol><li><p>传递参数</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 跳转并携带query参数，to的字符串写法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/message/detail?id<span class="token punctuation">=</span>666&amp;title<span class="token punctuation">=</span>你好<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 跳转并携带query参数，to的对象写法 --></span>&lt;router-link     :to="{        path:'/home/message/detail',        query:{        id:666,        title:"你好"       }   }">跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li><p>接收参数</p><pre class=" language-js"><code class="language-js">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title</code></pre></li></ol><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol><li><p>作用：可以简化路由的跳转</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Demo<span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Test<span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token comment" spellcheck="true">//给路由命名</span>                    path<span class="token punctuation">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span>                    component<span class="token punctuation">:</span>Hello                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>简化跳转：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 简化前，需要写完整的路径 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/demo/test/welcome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 简化后，直接通过名字跳转 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 简化写法配合传递参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span>      <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{           name:<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>           query:{               id:666,            title:<span class="token punctuation">'</span>你好<span class="token punctuation">'</span>               }           }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ol><h2 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h2><ol><li><p>配置路由，声明接收params参数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    path<span class="token punctuation">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span><span class="token string">'test'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Test<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token comment" spellcheck="true">//给路由命名</span>            path<span class="token punctuation">:</span><span class="token string">'welcome/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//使用占位符声明接收params参数</span>            component<span class="token punctuation">:</span>Hello        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>传递参数</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 跳转并携带params参数，to的字符串写法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/message/detail/666/你好<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 跳转并携带params参数，to的对象写法 --></span>&lt;router-link     :to="{        name:'hello',        params:{        id:666,        title:"你好"       }   }">跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数</p><pre class=" language-js"><code class="language-js">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title</code></pre></li></ol><h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><p>​    作用：让路由组件更方便的收到参数</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Detail<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//第一种写法：props值为对象，该对象中的所有key—value的组合最终都会通过props传给Detail组件</span>    <span class="token comment" spellcheck="true">//props:{a:900}</span>        <span class="token comment" spellcheck="true">//第二种写法：props值为布尔值，则把路由收到的所有params参数通过props传给Detail组件</span>    <span class="token comment" spellcheck="true">//props:true</span>            <span class="token comment" spellcheck="true">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span>     <span class="token function">props</span><span class="token punctuation">(</span>$route<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            title<span class="token punctuation">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//以上可以通过结构赋值简写，即：</span>    <span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">{</span>query<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            title<span class="token punctuation">:</span>query<span class="token punctuation">.</span>title        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="<router-link>的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h2><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，而<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .....&gt;News&lt;/router-link&gt;</code></li></ol><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>        params<span class="token punctuation">:</span><span class="token punctuation">{</span>            id<span class="token punctuation">:</span>xxx<span class="token punctuation">,</span>            title<span class="token punctuation">:</span>xxx        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     name<span class="token punctuation">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>        params<span class="token punctuation">:</span><span class="token punctuation">{</span>            id<span class="token punctuation">:</span>xxx<span class="token punctuation">,</span>            title<span class="token punctuation">:</span>xxx        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//后退</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//可前进也可后退</span></code></pre></li></ol><h2 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h2><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁</p></li><li><p>具体编码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>News<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h2><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发</li><li><code>deactivated</code>路由组件失活时触发</li></ol></li></ol><blockquote><p>一般配合缓存路由组件做一些异步操作，比如关闭定时器</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">0.01</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">deactivated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p><strong>全局守卫：</strong></p><p>首先给需要检查的路由添加配置项：<code>meta:{ isAuth: true }</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局前置守卫，初始化执行时，每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断当前路由是否需要进行权限控制</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'vip'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//权限控制的具体规则</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alter</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//next({name:'detail'})</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//全局后置守卫，初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment" spellcheck="true">//修改网页的title</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>独享守卫</strong></p><blockquote><p>beforeEnter配置项，组件独享的守卫，没有后置守卫，但可以配合全局后置守卫使用</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span><span class="token string">'/detail'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span>Detail    meta<span class="token punctuation">:</span><span class="token punctuation">{</span>isAuth<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>title<span class="token punctuation">:</span><span class="token string">'详情'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    beforeEnter<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断当前路由是否需要进行权限控制</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'vip'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//权限控制的具体规则</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alter</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//next({name:'detail'})</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放行</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>组件内守卫</p><blockquote><p>写在xxx.vue组件内，是一个函数</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//进入守卫，通过路由规则，进入该组件时被调用</span><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//离开守卫，通过路由规则，离开该组件时被调用</span><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h2><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在HTTP请求中，即：hash值不会带给服务器</li><li><code>hash</code>模式：<ol><li>地址中永远带着#号，不美观</li><li>若以后地址通过第三方手机app分享，若app效验严格，则地址会被标记为不合法</li><li>兼容性较好</li></ol></li><li>history模式：<ol><li>地址干净，美观</li><li>兼容性和hash模式相比略差</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务器404的问题</li></ol></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    mode<span class="token punctuation">:</span><span class="token string">'history'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//默认是'hash'</span>    routes<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'detail'</span><span class="token punctuation">,</span>            path<span class="token punctuation">:</span><span class="token string">'/detail'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span>Detail        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—vuex</title>
      <link href="/undefined/59327.html"/>
      <url>/undefined/59327.html</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间的通信。</p><p>​    <strong>何时使用：</strong>多个组件需要共享数据时</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><img src="../imgs/vuex.png"><h3 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h3><blockquote><p>vue2中，要用vuex的3版本———npm i vuex@3</p><p>vue3中，要用vuex的4版本———npm i vue@4</p></blockquote><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//准备action对象—响应组件中用户的动作</span><span class="token keyword">const</span> actions<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备mutations对象—修改state中的数据</span><span class="token keyword">const</span> mutations<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//准备state对象—保存具体的数据</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入store配置项</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//.....</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token comment" spellcheck="true">//.....</span><span class="token comment" spellcheck="true">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    render<span class="token punctuation">:</span>h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>    store<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>初始化数据，配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment" spellcheck="true">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment" spellcheck="true">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//响应组件中加的动作</span>    <span class="token function">jia_logic</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里写逻辑判断或网络请求</span>        context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行加</span>    <span class="token function">JIA</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        state<span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>    sum<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    actions<span class="token punctuation">,</span>    mutations<span class="token punctuation">,</span>    state<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名', 数据 )</code>或<code>$store.commot('mutations中的方法名',数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//.....</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    getters<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><ol><li><p>mapState方法：用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助mapState生成计算属性，sum、school、subject（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token punctuation">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span>school<span class="token punctuation">:</span><span class="token string">'school'</span><span class="token punctuation">,</span>subject<span class="token punctuation">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//借助mapState生成计算属性，sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>mapGetters方法：用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class=" language-js"><code class="language-js">computed<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//借助mapGetters生成计算属性：bigSum(对象写法)</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>bigSum<span class="token punctuation">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//借助mapGetters生成计算属性：bigSum(数组写法)</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre></li><li><p>mapActions方法：用于帮助我们生成与<code>actions</code>对话的方法，即包含：<code>$store.dispatch(xxx)</code>的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//靠mapActions生成：incrementOdd,incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>incrementOdd<span class="token punctuation">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span>incrementWait<span class="token punctuation">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//靠mapActions生成：increamentOdd,increamentWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>mapMutations方法：用于帮助我们生成与<code>mutations</code>对话的方法，即包含：`$store.comit(xxx)的函数</p><pre class=" language-js"><code class="language-js">methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//靠mapMutations生成，increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>increment<span class="token punctuation">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>decrement<span class="token punctuation">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//靠mapMutations生成，JIA，JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote></li></ol><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确</p></li><li><p>修改<code>store.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> countOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启命名空间</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    namespaced<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//开启命名空间</span>    state<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     modules<span class="token punctuation">:</span><span class="token punctuation">{</span>        countOptions<span class="token punctuation">,</span>        personOptions    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：直接读取：</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>countOptions<span class="token punctuation">.</span>sum<span class="token comment" spellcheck="true">//方式二：借助mapState读：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countOptions'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：直接读取：</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personOptions/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//方式二：借助mapGetters读：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countOptions'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'firstPersonName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：直接读取：</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personOptions/addPersonWang'</span><span class="token punctuation">,</span>personObj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countOptions'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>addWang<span class="token punctuation">:</span>addPersonWang<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>开启命名空间后，组件中调用commit：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：直接读取：</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personOptions/ADD_PERSON'</span><span class="token punctuation">,</span>personObj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'personOptions'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>add<span class="token punctuation">:</span><span class="token string">'ADD_PERSON'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—组件式编程</title>
      <link href="/undefined/52753.html"/>
      <url>/undefined/52753.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块与组件、模块化与组件化"><a href="#模块与组件、模块化与组件化" class="headerlink" title="模块与组件、模块化与组件化"></a>模块与组件、模块化与组件化</h2><h3 id="1-模块"><a href="#1-模块" class="headerlink" title="1. 模块"></a>1. 模块</h3><ol><li>理解：向外提供特定功能的js程序，一般就是一个js文件</li><li>为什么：js文件很多很复杂</li><li>作用：复用js，简化js的编写，提高js运行效率</li></ol><h3 id="2-组件"><a href="#2-组件" class="headerlink" title="2. 组件"></a>2. 组件</h3><ol><li>理解：用来实现局部（特定）功能效果的代码集合（html/css/js/image…)</li><li>为什么：一个页面功能很复杂</li><li>作用：复用编码，简化项目编码，提高运行效率</li></ol><h3 id="3-模块化"><a href="#3-模块化" class="headerlink" title="3. 模块化"></a>3. 模块化</h3><p>​    当应用中的js都以模块来编写的，那这个应用就是一个模块化的应用</p><h3 id="4-组件化"><a href="#4-组件化" class="headerlink" title="4. 组件化"></a>4. 组件化</h3><p>​    当应用中的功能都是多功能组件的方式来编写的，那这个应用就是一个组件化的应用</p><h2 id="非单文件组件与单文件组件"><a href="#非单文件组件与单文件组件" class="headerlink" title="非单文件组件与单文件组件"></a>非单文件组件与单文件组件</h2><h3 id="Vue中使用组件的三大步骤："><a href="#Vue中使用组件的三大步骤：" class="headerlink" title="Vue中使用组件的三大步骤："></a>Vue中使用组件的三大步骤：</h3><ol><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件</li></ol><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><ol><li>模块编写没有提示</li><li>没有构建过程</li><li>不支持组件的CSS</li><li>真正开发几乎不用</li></ol><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><h4 id="一个-vue文件的组成"><a href="#一个-vue文件的组成" class="headerlink" title="一个.vue文件的组成"></a>一个.vue文件的组成</h4><ol><li><p>模板页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 页面模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>JS模块对象</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></li><li><p>样式</p><pre class=" language-css"><code class="language-css">&lt;style><span class="token comment" spellcheck="true">/* 样式定义 */</span>&lt;/style></code></pre></li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li>引入组件</li><li>映射成标签</li><li>使用组件标签</li></ol><h2 id="VueComponent构造函数"><a href="#VueComponent构造函数" class="headerlink" title="VueComponent构造函数"></a>VueComponent构造函数</h2><ol><li><p>一个组件比如school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p></li><li><p>我们只需要写组件标签，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</p></li><li><p>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！</p></li><li><p>关于this指向：</p><p>（1）组件配置中：</p><p>​        data函数、methods中的函数、watch中的函数、computed中的函数  它们的this均是【VueComponent实例对象】</p><p>（2）new Vue(options)配置中：</p><p>​        data函数、methods中的函数、watch中的函数、computed中的函数  它们的this均是【Vue实例对象】</p></li></ol><h2 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h2><ol><li>一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype </li><li>为什么要有这个关系：让组件实例对象 vc 可以访问到Vue原型上的属性、方法</li></ol><img src="..\imgs\一个内置关系.png"><h2 id="使用Vue-cli（Vue脚手架）"><a href="#使用Vue-cli（Vue脚手架）" class="headerlink" title="使用Vue-cli（Vue脚手架）"></a>使用Vue-cli（Vue脚手架）</h2><h3 id="1-具体步骤"><a href="#1-具体步骤" class="headerlink" title="1. 具体步骤"></a>1. 具体步骤</h3><ol><li><p>第一步（仅第一次执行）：全局安装@vue/cli</p><blockquote><p>npm install -g @vue/cli</p></blockquote></li><li><p>切换到你要创建项目的目录，然后使用命令创建项目</p><blockquote><p>vue create xxx</p></blockquote></li><li><p>启动项目</p><blockquote><p>npm run serve</p></blockquote></li><li><p>备注</p><blockquote><p>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote></li></ol><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><blockquote><p><strong>关于不同版本的Vue：</strong></p><ol><li><p>vue.js与vue.runtime.xxx.js的区别：</p><p>（1）vue.js是完整版的Vue，包含：核心功能+模板解析器</p><p>（2）vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；</p></li><li><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p></li></ol></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// render:h => h(App)</span><span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span><span class="token string">'你好啊'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li><p>被用来给元素或子组件注册引用信息（id的替代者）</p></li><li><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p></li><li><p>使用方式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>School</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>School</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 获取:this.$refs.xxx --></span></code></pre></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><p> <strong>功能：让组件接收外部传过来的数据</strong></p><p>（1）传递数据：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- :是v-bind简写，让""里面进行表达式运算，值为Number类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>（2）接收数据：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第一种方式（只接收）</span>props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//第二种方式（限制类型，不是强制转换，而是控制台会报错提示）：</span>props<span class="token punctuation">:</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span>String<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>Number<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第三种方式（限制类型、限制必要性、指定默认值）</span>props<span class="token punctuation">:</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span>String<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型</span>            required<span class="token punctuation">:</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">//必要性</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">99</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>备注：</strong> props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p><h2 id="mixin混入、插件、scoped样式"><a href="#mixin混入、插件、scoped样式" class="headerlink" title="mixin混入、插件、scoped样式"></a>mixin混入、插件、scoped样式</h2><h3 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h3><blockquote><p>功能：可以把多个组件共用的配置提取成一个混入对象</p><p>使用方式：</p><p>​    第一步定义混合，例如：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>第二步导入后使用混入，例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局混入：</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//局部混入：</span>mixins<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span></code></pre></blockquote><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote><p>功能：用于增强Vue</p><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p><p>定义插件：</p><p>对象.install = function (Vue,options){</p><p>​    //1. 添加全局过滤器</p><p>​    Vue.filter(…)</p><p>​    //2. 添加实例方法</p><p>​    Vue.prototype.$myMethod = function(){…}</p><p>}</p><p>使用插件：Vue.use()</p></blockquote><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><blockquote><p>作用：让样式在局部生效，防止冲突</p><p>写法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>拓展：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>less<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 里面可以写less语法，不过脚手架需要npm i less-loader且版本要与webpack对应，比如webpack5.x对应less-loader@9或者8 --></span></code></pre></blockquote><p>原理：</p><img src="..\imgs\scoped原理.png"><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><ol><li><p>一种组件间通信的方式，适用<strong>任意组件</strong>间通信</p></li><li><p>安装全局事件总线：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">//安装，$bus就是当前应用的vm</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</p><pre class=" language-js"><code class="language-js"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//绑定自定义事件</span><span class="token punctuation">}</span></code></pre></li><li><p>提供数据：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用这个自定义方法并传值</span></code></pre></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件</p></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><ol><li><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">)</span></code></pre></li><li><p>作用： 在下一次DOM更新结束后执行其指定的回调</p></li><li><p>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。（说白了就是重新解析模板后执行回调函数，一般是在某个函数新添加或显示的比如input框什么的进行的操作）</p></li></ol><h2 id="Vue封装的过渡与动画"><a href="#Vue封装的过渡与动画" class="headerlink" title="Vue封装的过渡与动画"></a>Vue封装的过渡与动画</h2><ol><li><p>作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：</p><img src="..\imgs\Vue封装的过度与动画.png"></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter: 进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式<ol><li>v-enter: 离开的起点</li><li>v-enter-active：离开过程中</li><li>v-enter-to：离开的终点</li></ol></li></ul></li><li><p>使用transition标签包裹要过渡的元素，并配置name属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好啊！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre></li><li><p>备注：若多个元素需要过渡，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p></li></ol></li></ol><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><blockquote><p>只需要研究：进入的起点、进入的终点、离开的起点、离开的终点</p></blockquote><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><blockquote><p>只需要研究：进入的过程中、离开的过程中</p></blockquote><p>以引用第三方动画库animate.css为例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span>    <span class="token attr-name">appear</span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate_animated animate_bounce<span class="token punctuation">"</span></span>     <span class="token attr-name">enter-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate_swing<span class="token punctuation">"</span></span>    <span class="token attr-name">leave-active-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animate_baclOutUp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好啊！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">></span></span></code></pre><h2 id="Vue脚手架配置代理"><a href="#Vue脚手架配置代理" class="headerlink" title="Vue脚手架配置代理"></a>Vue脚手架配置代理</h2><blockquote><p>​    在localhost:8080直接向localhost:5000请求资源，会发生跨域问题，所以需要一台代理服务器作为中间转发与接收，端口号与本地8080一致</p></blockquote><p>首先npm i axios库，然后import引入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取学生信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'App'</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">getStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:5000/students'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>then<span class="token punctuation">{</span>                    response <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求成功了'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    error <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求失败了'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置代理服务器，请求端口是5000</span>devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">}</span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么请求会转发给服务器（优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则</p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'api1'</span><span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//匹配所有以'/api1'开头的请求路径</span>         target<span class="token punctuation">:</span><span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//代理目标的基础路径</span>         changOrigin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>         pathRewrite<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//重写路径，把'/api1'重写成空字符</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token string">'api2'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//匹配所有以'/api1'开头的请求路径</span>          target<span class="token punctuation">:</span><span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//代理目标的基础路径</span>          changOrigin<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>          pathRewrite<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'^/api1'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//重写路径，把'/api1'重写成空字符</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    changOrigin设置为true时，服务器收到的请求中的host为：localhost:5000    changOrigin设置为false时，服务器收到的请求中的host为：localhost:8080    changOrigin默认值为true*/</span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong></p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class=" language-html"><code class="language-html">父组件中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>html结构<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">></span></span>子组件中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义插槽 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>插槽默认内容，没有传结构时显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>具名插槽：</p><pre class=" language-html"><code class="language-html">父组件中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>html结构1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>html结构2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">></span></span>子组件中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义插槽 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>插槽默认内容，没有传结构时显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>插槽默认内容，没有传结构时显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App决定）</p></li><li><p>具体编码：</p><pre class=" language-html"><code class="language-html">父组件中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scopeData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 生成的是ul列表 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>g in scopeData.games<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>g<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{g}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用结构赋值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{games}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 生成的是h4标题 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>g in games<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>g<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{g}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">></span></span>子组件中：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:games</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>插槽默认内容，没有传结构时显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'Category'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//数据在子组件自身</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                games<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'cf'</span><span class="token punctuation">,</span><span class="token string">'cs-go'</span><span class="token punctuation">,</span><span class="token string">'英雄联盟'</span><span class="token punctuation">,</span><span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—生命周期</title>
      <link href="/undefined/36550.html"/>
      <url>/undefined/36550.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2-0学习—生命周期"><a href="#Vue2-0学习—生命周期" class="headerlink" title="Vue2.0学习—生命周期"></a>Vue2.0学习—生命周期</h2><img src="..\imgs\生命周期.png"><blockquote><p>以上生命周期函数都可以用debugger逐个断点测试验证</p></blockquote><ul><li><p>常用的生命周期钩子（回调函数）</p><ol><li>mounted：发送ajax请求，启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li>beforeDestroy：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol></li><li><p>关于销毁Vue实例</p><ol><li>销毁后借助Vue开发工具看不到任何信息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li></ol></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html部分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span>opacity<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欢迎学习Vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>opacity <span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>透明度设置为1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我停止变换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* js部分 */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        opacity<span class="token punctuation">:</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">0.01</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'vm即将挂了'</span><span class="token punctuation">)</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—基础知识</title>
      <link href="/undefined/22330.html"/>
      <url>/undefined/22330.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><ol><li><p>插值语法:</p><p>功能：用于解析标签体内容</p><p>写法：，其中xxx是js表达式，且可以直接读取到data中的所有属性。</p></li><li><p>指令语法：</p><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件……）</p><p>举例：v-bind:href=”xxx”或 简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p></li></ol><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><blockquote><p>v-bind：单向绑定解析表达式，可简写为：  :xxx<br>v-model：双向数据绑定<br>v-for：遍历数组/对象/字符串<br>v-on：绑定事件监听，可简写为@<br>v-if：条件渲染（动态控制节点是否存在）<br>v-else：条件渲染（动态控制节点是否存在）<br>v-show：条件渲染（动态控制节点是否展示）<br>v-text：向其所在节点中渲染文本内容<br>v-hml：比v-text多了结构解析的功能<br>v-cloak：本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。配合css[可以解决网速慢时页面展示出的问题。<br>v-once：所在节点在初次动态渲染后，就视为静态内容。<br>v-pre：跳过其所在节点的编译过程</p></blockquote><ol><li><p>数据绑定</p><ol><li><p>单向绑定：’ v-bind:value ‘，简写：’:value’，数据只能从data流向页面。</p></li><li><p>双向绑定：’ v-model:value ‘，简写：’v-model’，数据不仅能从data流向页面，还可以从页面流向data</p><p>注意：v-model只能应用在表单类元素（如：input、select等）</p></li></ol><pre class=" language-html"><code class="language-html">单向数据绑定：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>双向数据绑定：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--如下代码是错误的--></span><span class="token comment" spellcheck="true">&lt;!-- &lt;h2 v-model:x="name">你好&lt;/h2>--></span></code></pre></li><li><p>事件处理</p><ul><li><p>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名。</p></li><li><p>@click=”demo” 和@click=”demo($event)” 效果一致，但后者可以传参。</p></li><li><p>@keyup.enter、@keydown.enter<br>Vue中的事件修饰符：</p><ol><li><p>prevent：阻止默认事件（常用，比如a连接点击跳转事件）</p></li><li><p>stop：阻止事件冒泡（常用）</p></li><li><p>once：事件只触发一次（常用）</p></li><li><p>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p></li></ol><p>Vue中常用的按键别名：</p><ol><li><p>回车 =&gt; enter</p></li><li><p>删除 =&gt; delete（捕获“删除”和“退格”键）</p></li><li><p>退出 =&gt; esc</p></li><li><p>空格 =&gt; space</p></li><li><p>换行 =&gt; tab （特殊，必须配合keydown使用）</p></li><li><p>上 =&gt;up、下 =&gt; down、左 =&gt;left、右 =&gt; right</p></li></ol></li></ul></li><li><p>条件渲染：</p><ol><li>v-if<br>写法：<br>​    （1）v-if=”表达式”<br>​    （2）v-else-if=”表达式”<br>​    （3）v-else=”表达式”<br>适用于：切换频率较低的场景。<br>特点：不展示的DOM元素直接被移除<br>注意：v-if可以和：v-else-if、v-else一起使用，但要求结构不能被“打断”。</li><li>v-show：<br>写法：v-show=”表达式”<br>适用于：切换频率较高的场景<br>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li></ol><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- template标签只能配合v-if使用 --></span><span class="token comment" spellcheck="true">&lt;!-- 该标签作用是条件成立时显示以下结构，不会留下该标签痕迹 --></span><span class="token comment" spellcheck="true">&lt;!-- 不同于再套一个div，会破坏原有结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>列表渲染：</p><p>v-for指令：</p><ol><li><p>用于展示列表数据</p></li><li><p>语法：v-for=”(item,index) in xxx” :key=”yyy”</p></li><li><p>可遍历：数组、对象、字符串（少见）   </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p in persons<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{p.name}}-{{p.age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                persons<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'001'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'002'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token string">'003'</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'王五'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>！面试题：vue中的key有什么作用？（key的内部原理）</strong></p><ol><li>虚拟DOM中key的作用：<br>key是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</li><li>对比规则（diff算法）：<br>（1）旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>   ①.若虚拟DOM中内容没变，直接使用之前的真实DOM<br>   ②.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM。<br>  （2）旧虚拟DOM中未找到与新虚拟DOM相同的key：<br>       创建新的真实DOM，随后渲染到页面上</li><li>用index作为key可能会引发的问题：<ol><li>若数据进行逆序添加、逆序删除等破坏结构的顺序操作会产生没有必要的真实DOM更新 ==&gt; 页面效果没问题，但效率低。</li><li>如果结构中还包含输入类的DOM会产生错误的DOM更新 ==&gt; 页面出问题</li></ol></li><li>开发中如何选择key？<ol><li>最好使用每条数据的唯一标识作为key，比如id、手机号、学号等等</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ol></li></ol></li></ol></li><li><p>v-text指令：</p><ol><li>作用：向其所在的节点中渲染文本内容</li><li>与插值语法的区别：v-text会替换掉节点中的内容，则不会</li></ol></li><li><p>v-html指令：</p><ol><li>作用：与v-text相比多了支持结构的解析</li><li>注意：安全性问题，比如cookie的盗用，例如评论回复如果使用v-html解析连接标签跟上document.cookie会盗取cookie，不过好的一些服务器会限制HttpOnly不让直接获取cookie。</li></ol></li><li><p>v-cloak指令：<br>​    本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。配合css[可以解决网速慢时页面展示出的问题。<br>css：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token selector"><span class="token attribute">[v-cloak]</span></span><span class="token punctuation">{</span>     <span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span> <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>html：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>v-once指令：</p><ol><li>v-once所在节点在初次动态渲染后，就监视为静态内容了。</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>初始化的n值是：{{n}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>当前的n值是：{{n}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我n+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>v-pre指令：</p><ol><li>跳过其所在节点的编译过程</li><li>可利用它跳过：没有使用指令语法，没有使用插值语法的节点，会加快编译。</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>Vue其实很简单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ol><li><p>定义语法：<br>（1）局部指令：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  directives<span class="token punctuation">:</span><span class="token punctuation">{</span>指令名：配置对象<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  directives<span class="token punctuation">:</span><span class="token punctuation">{</span>指令名：回调函数<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>（2）全局指令：</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>指令名<span class="token punctuation">,</span>配置对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>指令名<span class="token punctuation">,</span>回调函数<span class="token punctuation">)</span></code></pre></li><li><p>配置对象中常用的3个回调：</p><p>（1）bind：指令与元素成功绑定时调用。</p><p>（2）inserted：指令所在元素被插入页面时调用。</p><p>（3）update：指令所在模板结构被重新解析时调用。</p></li><li><p>备注</p><ol><li>指令定义时不加v-，但使用时要加v-</li><li>指令名如果是多个单词，要使用user-name命名方式，不要使用userName方式命名</li></ol></li></ol><p>函数式：</p><blockquote><p>需求：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html部分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>当前的n值是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>放大10倍后的n值是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-big</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n++<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我n+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* js部分 */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>        n<span class="token punctuation">:</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    directive<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//big函数何时会被调用？1.指令与元素成功绑定时 2.指令所在的模板被重新解析时</span>        <span class="token function">big</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>            element<span class="token punctuation">.</span>innerText <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">10</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>对象式：</p><blockquote><p>需求：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html部分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>当前的n值是：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-fbind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* js部分 */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>        n<span class="token punctuation">:</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    directive<span class="token punctuation">:</span><span class="token punctuation">{</span>        fbind<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//指令与元素成功绑定时</span>            <span class="token function">bind</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//指令所在元素被插入页面时</span>            <span class="token function">inserted</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//指令所在的模板被重新解析时</span>            <span class="token function">update</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>binding<span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="data与el的两种写法"><a href="#data与el的两种写法" class="headerlink" title="data与el的两种写法"></a>data与el的两种写法</h2><ol><li><p>el的2种写法</p><p>(1). new Vue时候配置el属性</p><p>(2). 先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p></li><li><p>data的2中写法</p><p>(1). 对象式</p><p>(2). 函数式</p><p>如何选择：以后学到组件时，data必须使用函数式，否则会报错。</p></li><li><p>一个重要的原则：</p><p>由Vue管理的函数，一定不要写箭头函数，一旦写箭头函数，this就不再是Vue实例了。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第一种写法</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'小明'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第二种写法</span><span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'小明'</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//返回一个对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Vue的MVVM模型"><a href="#Vue的MVVM模型" class="headerlink" title="Vue的MVVM模型"></a>Vue的MVVM模型</h2><h5 id="MVVM介绍"><a href="#MVVM介绍" class="headerlink" title="MVVM介绍"></a>MVVM介绍</h5><blockquote><p>​    MVVM 是<a href="https://so.csdn.net/so/search?q=Model&amp;spm=1001.2101.3001.7020">Model</a>-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。</p><p>​    Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。</p></blockquote><h5 id="Vue-js中MVVM的体现"><a href="#Vue-js中MVVM的体现" class="headerlink" title="Vue.js中MVVM的体现"></a>Vue.js中MVVM的体现</h5><ol><li>M：模型（Model）：对应data中的数据</li><li>V：视图（View）：模板</li><li>VM：视图模型（ViewModel）：Vue实例对象</li></ol><img src="../imgs/vue-MVVM.png" style="zoom:80%;"><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><ol><li><p>回顾Object.defineproperty方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//三个参数,为person对象添加age，并且数据来源于number</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//value:18,</span>    <span class="token comment" spellcheck="true">//enumerable:true, //控制属性是否可以被枚举，默认false</span>    <span class="token comment" spellcheck="true">//writable:true, //控制属性是否可以被修改</span>    <span class="token comment" spellcheck="true">//configurable:true //控制属性是否可以被删除，delete person.age</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人读取age属性了'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> number    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有人修改了age属性，且值是'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>        number <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>理解数据代理</p><blockquote><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>y<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span>x    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        obj<span class="token punctuation">.</span>x <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><img src="../imgs/v-数据代理.png"></li><li><p>Vue中的数据代理</p><blockquote><ol><li><p>Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读/写）</p></li><li><p>Vue中数据代理的好处：更加方便的操作data中的数据</p></li><li><p>基本原理：</p><p>通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>为每一个添加到vm上的属性，都指定一个getter/setter。</p><p>在getter/setter内容去操作（读/写）data中对应的属性</p></li></ol><p>插值表达式其实是表示，只不过因为数据代理的应用，可以直接简写成</p></blockquote><img src="..\imgs\vue数据代理.png"><blockquote><p>但是_data中的数据并不是{name:…,address:…}一个对象，而是通过数据劫持（不是数据代理），升级成了与数据代理长相差不多的，主要完成响应式的操作，检测 _data中数据改变从而改变的值。</p></blockquote></li></ol><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ol><li><p>定义：要用的属性不存在，要通过已有属性计算得来。</p></li><li><p>原理：底层借助了Object.defineproperty方法提供的getter和setter。</p></li><li><p>get函数什么时候执行？</p><p>（1）初次读取时会执行一次</p><p>（2）当依赖的数据发生改变时会再次调用。</p></li><li><p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p></li><li><p>备注：</p><ol><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ol></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        firstName<span class="token punctuation">:</span><span class="token string">'张'</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span><span class="token string">'三'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>        fullName<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//vm.fullName = xxx，这时set函数起作用</span>                <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="计算属性简写"><a href="#计算属性简写" class="headerlink" title="计算属性简写"></a>计算属性简写</h3><ul><li>只有考虑读取的时候，不考虑修改的时候才可以使用</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        firstName<span class="token punctuation">:</span><span class="token string">'张'</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span><span class="token string">'三'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p>监视属性watch：</p><ol><li><p>当被监视的属性变化时，回调函数（handler）自动调用，进行相关操作</p></li><li><p>监视的属性必须存在，才能进行监视</p></li><li><p>监视属性的两种写法：</p><p>（1）new Vue时传入watch配置</p><p>（2）通过vm.$watch监视</p></li></ol><p>深度监视：</p><ol><li>Vue中的watch默认不监测对象内部值的改变（一层）</li><li>配置deep:true可以检测对象内部值的改变（多层）</li></ol><p>备注：</p><ol><li>Vue自身可以检测对象内部值的改变，但Vue提供的watch默认不可以</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        isHot<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        numbers<span class="token punctuation">:</span><span class="token punctuation">{</span>            a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        isHot<span class="token punctuation">:</span><span class="token punctuation">{</span>            immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//初始化时让handler调用一下</span>            <span class="token comment" spellcheck="true">//handler什么时候调用？当isHot发生改变时</span>            <span class="token function">handler</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isHot被修改了'</span>，newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         numbers<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//监视多级结构中所有属性的变化</span>             deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'numbers改变了'</span><span class="token punctuation">)</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*vm.$watch('isHot',{        immediate:true, //初始化时让handler调用一下        handler什么时候调用？当isHot发生改变时        handler(newValue,oldValue){            console.log('isHot被修改了'，newValue,oldValue)        })*/</span></code></pre><h4 id="监视的简写形式"><a href="#监视的简写形式" class="headerlink" title="监视的简写形式"></a>监视的简写形式</h4><blockquote><p>和计算属性简写形式差不多，当配置项只有handler时可以使用简写</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        isHot<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">isHot</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'isHot被修改了'</span>，newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="watch对比computed"><a href="#watch对比computed" class="headerlink" title="watch对比computed"></a>watch对比computed</h2><p>computed和watch之间的区别：</p><ol><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        firstName<span class="token punctuation">:</span><span class="token string">'张'</span><span class="token punctuation">,</span>        lastName<span class="token punctuation">:</span><span class="token string">'三'</span><span class="token punctuation">,</span>        fullName<span class="token punctuation">:</span><span class="token string">'张-三'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">firstName</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">lastName</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> val            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><ol><li><p>class样式</p><p>写法：:class=”xxx”  xxx可以是字符串，对象，数组</p><p>对象写法适用于：类名不确定，要动态获取</p><p>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</p></li><li><p>style样式</p><p>:style=”{fontSize: xxx}”其中xxx是动态值</p><p>:style=”[a,b]”其中a、b是样式对象</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basic<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mood<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMood<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定，名字不确定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basic<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classArr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basic<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 绑定style样式--对象写法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basic<span class="token punctuation">"</span></span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">styleObj</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'小明'</span><span class="token punctuation">,</span>            mood<span class="token punctuation">:</span><span class="token string">'normol'</span><span class="token punctuation">,</span>            classArr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'demo1'</span><span class="token punctuation">,</span><span class="token string">'demo2'</span><span class="token punctuation">,</span><span class="token string">'demo3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            classObj<span class="token punctuation">:</span><span class="token punctuation">{</span>                demo1<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                demo2<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            styleObj<span class="token punctuation">:</span><span class="token punctuation">{</span>                fontSize<span class="token punctuation">:</span><span class="token string">'40px'</span><span class="token punctuation">,</span>                color<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">,</span>                backgroundColor<span class="token punctuation">:</span><span class="token string">'orange'</span>  <span class="token comment" spellcheck="true">//两个单词需要驼峰命名</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="Vue监视数据原理"><a href="#Vue监视数据原理" class="headerlink" title="Vue监视数据原理"></a>Vue监视数据原理</h2><blockquote><p>Vue监视数据的原理：</p><ol><li><p>vue会监视data中所有层次的数据</p></li><li><p>如何检测对象中的数据？</p><p>通过setter实现监视，且要在new Vue时就传入要监视的数据。</p><p>（1）对象中后追加的属性，vue默认不做响应式处理</p><p>（2）如需给后添加的属性做响应式，请使用如下API：</p><p>​    Vue.set(target, propertyName/index, value) 或</p><p>​    vm.$set(target, propertyName/index, value)</p></li><li><p>如何监视数组中的数据？</p><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>（1）调用原生对应的方法对数组进行更新。</p><p>（2）重新解析模板，进而更新界面。</p></li><li><p>在Vue修改数组中的某个元素一定要用如下方法：</p><ol><li>使用这些API：push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或vm.$set()</li></ol><p>注意：Vue.set() 或vm.$set()  不能给vm或vm的根数据对象 添加属性！</p></li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        student<span class="token punctuation">:</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>            hobby<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'玩游戏'</span><span class="token punctuation">,</span><span class="token string">'唱歌'</span><span class="token punctuation">,</span><span class="token string">'跳舞'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        friends<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jerry'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">36</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">addSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Vue.set(this.student,'sex','男')</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">addFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token punctuation">,</span>friends<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'jack'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><img src="../imgs/v-监视数据.png">]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_ES6新特性(2)</title>
      <link href="/undefined/1.html"/>
      <url>/undefined/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="第七种数据类型，Symbol"><a href="#第七种数据类型，Symbol" class="headerlink" title="第七种数据类型，Symbol()"></a>第七种数据类型，Symbol()</h2><ol><li><p>基础语法</p><blockquote><p>js的数据类型：数值，字符串，布尔，对象，null，undefined，Symbol<br>symbol可以当做对象的属性名，对象：key value对</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//const level1 = Symbol("level");</span><span class="token comment" spellcheck="true">//const level2 = Symbol("level");</span><span class="token comment" spellcheck="true">//console.log(level1 === level2) //false，下面可以简写</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//    [level]:"优秀" //es6新特性：变量当key要加[]</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"优秀"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"有钱"</span><span class="token punctuation">}</span></code></pre><ul><li><p>symbol属性不能被for…in获取</p></li><li><p>以及Object.keys()，Object.getOwnPropertyNames()</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> pro <span class="token keyword">in</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只输出两个key：name和age</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//下面俩都是输出[name,age]这个数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Objcet<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pros <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>如何拿到Symbol的值</p><ul><li>通过Object.getOwnPropertySymbols()拿到Symbol属性名</li><li>再通过for…of得到每个属性名</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> symList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//symList:[Symbol("level"),Symbol("level")]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> symList<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>pro<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优秀，有点</span><span class="token punctuation">}</span></code></pre></li><li><p>内置值</p><ul><li>Symbol.iterator：对象被for…of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f values(){[native code]}</span><span class="token comment" spellcheck="true">//如果对象有Symbol.iterator这个属性</span><span class="token comment" spellcheck="true">//这个对象就可以被for...of遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，student is not a iterator</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3,4,5,6</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2 id="回调地狱与promise"><a href="#回调地狱与promise" class="headerlink" title="回调地狱与promise"></a>回调地狱与promise</h2><ol><li><p>回调地狱</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取奶茶,火锅的方法</span><span class="token keyword">function</span> <span class="token function">getTea</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"奶茶"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getHotpot</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"火锅"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用获取奶茶的方法，回调函数获取数据值</span><span class="token comment" spellcheck="true">//getTea(function(data){</span><span class="token comment" spellcheck="true">//      console.log(data);</span><span class="token comment" spellcheck="true">//})</span><span class="token comment" spellcheck="true">//要求：先吃火锅，然后喝奶茶(顺序)</span><span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//实现第2秒吃火锅，再过1秒喝奶茶</span><span class="token comment" spellcheck="true">//需要层层嵌套，以后数据多了，维护性很差，这叫回调地狱</span></code></pre></li><li><p>promise</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//resolve可以把异步数据传递出来</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过then拿到异步数据</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello world</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>那么就可以改造刚刚的函数了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取奶茶,火锅的方法</span><span class="token keyword">function</span> <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"奶茶"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"火锅"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先吃火锅，再喝奶茶</span><span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再return一个Promise对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>async函数(ES8)</p><blockquote><p>虽然promise解决了回调地狱的通点，好了很多，但还是不友好，那么用async函数就可以更好的解决啦</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//直接获取resolve传递出来的异步数据</span>    <span class="token keyword">let</span> hotPot <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hotPot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tea <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tea<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这两个函数还是刚刚改造好的，返回的是Promise对象</span>    <span class="token comment" spellcheck="true">//这样看起来就跟同步代码一样，更清爽了</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_ES6新特性(1)</title>
      <link href="/undefined/40125.html"/>
      <url>/undefined/40125.html</url>
      
        <content type="html"><![CDATA[<h2 id="let与const的用法"><a href="#let与const的用法" class="headerlink" title="let与const的用法"></a>let与const的用法</h2><ol><li><p>let和var的区别</p><blockquote><p>var定义的变量没有块级作用域的概念</p><p>let定义的变量有块级作用域</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这时候是可以输出a的，如果换成let，是会报错的，因为受块级作用域的影响，a变成了局部变量</span></code></pre></li><li><p>let和var哪个好？</p><blockquote><p>let好，所以放弃使用var。</p></blockquote></li><li><p>const的使用</p><blockquote><p>定义的变量不能被修改，但是如果定义的是对象，那么里面的属性值可以修改，只是不能修改整个对象，同样的还要数组也是一样，然后const也是有块级作用域的</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义不修改的常量</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//obj = {name:"小红"}  //会报错</span><span class="token keyword">const</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小红"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果name为小红，属性值被修改</span></code></pre></li></ol><h2 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h2><ol><li><p>数组的结构赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//实现了赋值，a=10，b=20</span></code></pre><blockquote><p>用法：比如实现一个交换，让a=20，b=10，传统方法会有一个临时变量temp进行保存其中一个值，然后进行交换，但如果用结构赋值会简单很多</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出结果：20 10</span></code></pre></li><li><p>对象的结构赋值（常用）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span>    friend<span class="token punctuation">:</span><span class="token string">"小红"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//小明</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//16</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> friend <span class="token operator">=</span> <span class="token string">"小红"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>age<span class="token punctuation">,</span>        friend<span class="token punctuation">:</span>friend    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//let obj = createStudent();</span><span class="token comment" spellcheck="true">//console.log(obj.name) //Es5写法，拿到'name'</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Es6写法，代码简洁明了</span></code></pre></li></ol><h2 id="箭头函数的用法"><a href="#箭头函数的用法" class="headerlink" title="箭头函数的用法"></a>箭头函数的用法</h2><ul><li>()中定义参数，如果只有一个参数，可以不写括号</li><li>{}中写函数体，如果函数体中只有返回值，可以不写return</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//const fun1 = x => x; //只有一个参数</span><span class="token comment" spellcheck="true">//const fun = function(){</span><span class="token comment" spellcheck="true">//    return 100;</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两者的作用是一样的</span></code></pre><p>箭头函数和普通函数的区别：</p><blockquote><p>this指向不同<br>普通函数，谁调用这个函数，this就指向谁<br>箭头函数，在哪里定义函数，this就指向谁</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//  sayName(){</span><span class="token comment" spellcheck="true">//        console.log(this.name)//这里this可以输出小明，下面就不能了</span><span class="token comment" spellcheck="true">//        setTimeout(function(){</span><span class="token comment" spellcheck="true">//            console.log('我是${this.name}')//这个this指向window</span>            <span class="token comment" spellcheck="true">//Es6模板字符串，跟"我是"+this.name相同</span><span class="token comment" spellcheck="true">//        },500)</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this指向obj，可以输出name</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><blockquote><p>ES6引入rest参数，用于获取函数的实参，用来代替arguements</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES5获取实参的方式</span><span class="token keyword">function</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里输出{0:零,1:一,2:二}这个'对象'</span><span class="token punctuation">}</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'零'</span><span class="token punctuation">,</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rest参数</span><span class="token keyword">function</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里则输出的是数组</span><span class="token punctuation">}</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'零'</span><span class="token punctuation">,</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rest参数必须要放到最后</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果放前边会报错</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4,5,6]</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h2><ol><li><p>介绍</p><blockquote><p>‘…’ 拓展运算符能将 ‘数组’ 转化为逗号分隔的参数序列</p></blockquote></li><li><p>作用</p><ul><li><p>数组的合并</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'三'</span><span class="token punctuation">,</span><span class="token string">'四'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>one<span class="token punctuation">,</span><span class="token operator">...</span>two<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出['一','二','三','四']</span></code></pre></li><li><p>数组的克隆</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">,</span><span class="token string">'三'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>one<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这只是个浅拷贝</span></code></pre></li><li><p>将伪数组转换为真正的数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//比如html有3个div标签</span><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不过有rest参数的存在，没有必要把它作转换</span></code></pre></li></ul></li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><blockquote><p>迭代器(iterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署iterator接口，就可以完成遍历操作。</p><p>1）ES6创造了一种新的遍历命令for…of循环，iterator主要供for…of消费</p><p>2）原生具备iterator接口的数据（可用for…of遍历）</p><ol><li>Array</li><li>Arguments </li><li>Set</li><li>Map </li><li>String</li><li>TypeArray</li><li>NodeList</li></ol><p>3）工作原理</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> xiyou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token string">'沙僧'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiyou<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//往下翻，里面会有一个Symbol.iterator方法</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> xiyou<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用对象的next方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'唐僧',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'孙悟空',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'猪八戒',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'沙僧',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:undefined,done:true}</span></code></pre><p>应用-自定义遍历数据(迭代器原理)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//声明一个对象</span><span class="token keyword">const</span> banji <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"终极一班"</span><span class="token punctuation">,</span>    stus<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'xiaoming'</span><span class="token punctuation">,</span>        <span class="token string">'xiaoning'</span><span class="token punctuation">,</span>        <span class="token string">'xiaotian'</span><span class="token punctuation">,</span>        <span class="token string">'knight'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//索引变量</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//也可以用箭头函数</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            next<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span>_this<span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>done<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//下标自增</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>done<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//banji.stus.forEach()可以得到，但是不符合面向对象的思想</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> banji<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ol><li><p>函数声明与调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//生成器其实就是一个特殊的函数</span><span class="token comment" spellcheck="true">//异步编程 纯回调函数 node fs ajax mongodb</span><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello generator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样才能console.log上面的内容</span></code></pre><ul><li><p>函数代码分隔符yield</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'一只没有耳朵'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'一只没有尾巴'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'真奇怪'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//111</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//222</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//333</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//444</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>生成器函数的参数传递</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//AAA</span>    <span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">111</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BBB</span>    <span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">222</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CCC</span>    <span class="token keyword">let</span> three <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">333</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DDD</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行获取迭代器对象</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token string">'AAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next方法可以传入实参</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'BBB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>作为第<span class="token number">1</span>个<span class="token keyword">yield</span>的整体返回值console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'CCC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>作为第<span class="token number">2</span>个<span class="token keyword">yield</span>的整体返回值console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'DDD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>作为第<span class="token number">3</span>个<span class="token keyword">yield</span>的整体返回值</code></pre></li><li><p>生成器实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//异步编程</span><span class="token comment" spellcheck="true">//1s后控制台输出111 2s后输出222</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接着向下遍历实现实例</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用生成器函数</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到柚の小屋</title>
      <link href="/undefined/62416.html"/>
      <url>/undefined/62416.html</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>欢迎来到柚子的小屋<br>这里记录本人学习所记录的各种笔记<br>当然了偶尔也会分享一些小事情，希望能对你有所帮助</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>你可以通过‘分类’、‘标签’以及‘导航’搜索查看各类知识的笔记</p></blockquote><h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><blockquote><p>本站是基于Hexo+matery搭建的个人博客静态网页<br>如果你也想拥有一个属于自己的个人博客，那么可以在B站或者百度搜索学习<br>不仅Hexo，还有Wordpress、Hugo、Halo等等也可以有同样的效果进行搭建</p></blockquote><p>下面推荐B站两个大佬的教学视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.999.0.0">CodeSheep：手把手教你从0开始搭建自己的个人博客</a></li><li><a href="https://www.bilibili.com/video/BV14q4y1R7XM?spm_id_from=333.999.0.0">程序员鱼皮：手把手带你从0搭建个人博客</a></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>生命很短暂，一定要活出自己想要的模样，加油哦！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 欢迎 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
