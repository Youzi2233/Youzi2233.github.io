<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript_ES6新特性(2)</title>
      <link href="/undefined/1.html"/>
      <url>/undefined/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="第七种数据类型，Symbol"><a href="#第七种数据类型，Symbol" class="headerlink" title="第七种数据类型，Symbol()"></a>第七种数据类型，Symbol()</h2><ol><li><p>基础语法</p><blockquote><p>js的数据类型：数值，字符串，布尔，对象，null，undefined，Symbol<br>symbol可以当做对象的属性名，对象：key value对</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//const level1 = Symbol("level");</span><span class="token comment" spellcheck="true">//const level2 = Symbol("level");</span><span class="token comment" spellcheck="true">//console.log(level1 === level2) //false，下面可以简写</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//    [level]:"优秀" //es6新特性：变量当key要加[]</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"优秀"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"有钱"</span><span class="token punctuation">}</span></code></pre><ul><li><p>symbol属性不能被for…in获取</p></li><li><p>以及Object.keys()，Object.getOwnPropertyNames()</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> pro <span class="token keyword">in</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只输出两个key：name和age</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//下面俩都是输出[name,age]这个数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Objcet<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pros <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>如何拿到Symbol的值</p><ul><li>通过Object.getOwnPropertySymbols()拿到Symbol属性名</li><li>再通过for…of得到每个属性名</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> symList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//symList:[Symbol("level"),Symbol("level")]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> symList<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>pro<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//优秀，有点</span><span class="token punctuation">}</span></code></pre></li><li><p>内置值</p><ul><li>Symbol.iterator：对象被for…of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f values(){[native code]}</span><span class="token comment" spellcheck="true">//如果对象有Symbol.iterator这个属性</span><span class="token comment" spellcheck="true">//这个对象就可以被for...of遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> student<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错，student is not a iterator</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2,3,4,5,6</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h2 id="回调地狱与promise"><a href="#回调地狱与promise" class="headerlink" title="回调地狱与promise"></a>回调地狱与promise</h2><ol><li><p>回调地狱</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取奶茶,火锅的方法</span><span class="token keyword">function</span> <span class="token function">getTea</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"奶茶"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getHotpot</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"火锅"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用获取奶茶的方法，回调函数获取数据值</span><span class="token comment" spellcheck="true">//getTea(function(data){</span><span class="token comment" spellcheck="true">//      console.log(data);</span><span class="token comment" spellcheck="true">//})</span><span class="token comment" spellcheck="true">//要求：先吃火锅，然后喝奶茶(顺序)</span><span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//实现第2秒吃火锅，再过1秒喝奶茶</span><span class="token comment" spellcheck="true">//需要层层嵌套，以后数据多了，维护性很差，这叫回调地狱</span></code></pre></li><li><p>promise</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//resolve可以把异步数据传递出来</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过then拿到异步数据</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//hello world</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>那么就可以改造刚刚的函数了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//获取奶茶,火锅的方法</span><span class="token keyword">function</span> <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"奶茶"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"火锅"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先吃火锅，再喝奶茶</span><span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再return一个Promise对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>async函数(ES8)</p><blockquote><p>虽然promise解决了回调地狱的通点，好了很多，但还是不友好，那么用async函数就可以更好的解决啦</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4</span>    <span class="token comment" spellcheck="true">//直接获取resolve传递出来的异步数据</span>    <span class="token keyword">let</span> hotPot <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getHotpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hotPot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tea <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tea<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这两个函数还是刚刚改造好的，返回的是Promise对象</span>    <span class="token comment" spellcheck="true">//这样看起来就跟同步代码一样，更清爽了</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_ES6新特性(1)</title>
      <link href="/undefined/40125.html"/>
      <url>/undefined/40125.html</url>
      
        <content type="html"><![CDATA[<h2 id="let与const的用法"><a href="#let与const的用法" class="headerlink" title="let与const的用法"></a>let与const的用法</h2><ol><li><p>let和var的区别</p><blockquote><p>var定义的变量没有块级作用域的概念</p><p>let定义的变量有块级作用域</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这时候是可以输出a的，如果换成let，是会报错的，因为受块级作用域的影响，a变成了局部变量</span></code></pre></li><li><p>let和var哪个好？</p><blockquote><p>let好，所以放弃使用var。</p></blockquote></li><li><p>const的使用</p><blockquote><p>定义的变量不能被修改，但是如果定义的是对象，那么里面的属性值可以修改，只是不能修改整个对象，同样的还要数组也是一样，然后const也是有块级作用域的</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义不修改的常量</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//obj = {name:"小红"}  //会报错</span><span class="token keyword">const</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小红"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//结果name为小红，属性值被修改</span></code></pre></li></ol><h2 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h2><ol><li><p>数组的结构赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//实现了赋值，a=10，b=20</span></code></pre><blockquote><p>用法：比如实现一个交换，让a=20，b=10，传统方法会有一个临时变量temp进行保存其中一个值，然后进行交换，但如果用结构赋值会简单很多</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出结果：20 10</span></code></pre></li><li><p>对象的结构赋值（常用）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span>    friend<span class="token punctuation">:</span><span class="token string">"小红"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//小明</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//16</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> friend <span class="token operator">=</span> <span class="token string">"小红"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>age<span class="token punctuation">,</span>        friend<span class="token punctuation">:</span>friend    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//let obj = createStudent();</span><span class="token comment" spellcheck="true">//console.log(obj.name) //Es5写法，拿到'name'</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Es6写法，代码简洁明了</span></code></pre></li></ol><h2 id="箭头函数的用法"><a href="#箭头函数的用法" class="headerlink" title="箭头函数的用法"></a>箭头函数的用法</h2><ul><li>()中定义参数，如果只有一个参数，可以不写括号</li><li>{}中写函数体，如果函数体中只有返回值，可以不写return</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//const fun1 = x => x; //只有一个参数</span><span class="token comment" spellcheck="true">//const fun = function(){</span><span class="token comment" spellcheck="true">//    return 100;</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两者的作用是一样的</span></code></pre><p>箭头函数和普通函数的区别：</p><blockquote><p>this指向不同<br>普通函数，谁调用这个函数，this就指向谁<br>箭头函数，在哪里定义函数，this就指向谁</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//  sayName(){</span><span class="token comment" spellcheck="true">//        console.log(this.name)//这里this可以输出小明，下面就不能了</span><span class="token comment" spellcheck="true">//        setTimeout(function(){</span><span class="token comment" spellcheck="true">//            console.log('我是${this.name}')//这个this指向window</span>            <span class="token comment" spellcheck="true">//Es6模板字符串，跟"我是"+this.name相同</span><span class="token comment" spellcheck="true">//        },500)</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this指向obj，可以输出name</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><blockquote><p>ES6引入rest参数，用于获取函数的实参，用来代替arguements</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES5获取实参的方式</span><span class="token keyword">function</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里输出{0:零,1:一,2:二}这个'对象'</span><span class="token punctuation">}</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'零'</span><span class="token punctuation">,</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rest参数</span><span class="token keyword">function</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里则输出的是数组</span><span class="token punctuation">}</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'零'</span><span class="token punctuation">,</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rest参数必须要放到最后</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果放前边会报错</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[3,4,5,6]</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h2><ol><li><p>介绍</p><blockquote><p>‘…’ 拓展运算符能将 ‘数组’ 转化为逗号分隔的参数序列</p></blockquote></li><li><p>作用</p><ul><li><p>数组的合并</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'三'</span><span class="token punctuation">,</span><span class="token string">'四'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>one<span class="token punctuation">,</span><span class="token operator">...</span>two<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出['一','二','三','四']</span></code></pre></li><li><p>数组的克隆</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'一'</span><span class="token punctuation">,</span><span class="token string">'二'</span><span class="token punctuation">,</span><span class="token string">'三'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>one<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这只是个浅拷贝</span></code></pre></li><li><p>将伪数组转换为真正的数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//比如html有3个div标签</span><span class="token keyword">const</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> divArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>divs<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不过有rest参数的存在，没有必要把它作转换</span></code></pre></li></ul></li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><blockquote><p>迭代器(iterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署iterator接口，就可以完成遍历操作。</p><p>1）ES6创造了一种新的遍历命令for…of循环，iterator主要供for…of消费</p><p>2）原生具备iterator接口的数据（可用for…of遍历）</p><ol><li>Array</li><li>Arguments </li><li>Set</li><li>Map </li><li>String</li><li>TypeArray</li><li>NodeList</li></ol><p>3）工作原理</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li></ol></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> xiyou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token string">'沙僧'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiyou<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//往下翻，里面会有一个Symbol.iterator方法</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> xiyou<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用对象的next方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'唐僧',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'孙悟空',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'猪八戒',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:'沙僧',done:false}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{value:undefined,done:true}</span></code></pre><p>应用-自定义遍历数据(迭代器原理)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//声明一个对象</span><span class="token keyword">const</span> banji <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"终极一班"</span><span class="token punctuation">,</span>    stus<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token string">'xiaoming'</span><span class="token punctuation">,</span>        <span class="token string">'xiaoning'</span><span class="token punctuation">,</span>        <span class="token string">'xiaotian'</span><span class="token punctuation">,</span>        <span class="token string">'knight'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//索引变量</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//也可以用箭头函数</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>            next<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> _this<span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span>_this<span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>done<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//下标自增</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>done<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//banji.stus.forEach()可以得到，但是不符合面向对象的思想</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> banji<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ol><li><p>函数声明与调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//生成器其实就是一个特殊的函数</span><span class="token comment" spellcheck="true">//异步编程 纯回调函数 node fs ajax mongodb</span><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello generator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样才能console.log上面的内容</span></code></pre><ul><li><p>函数代码分隔符yield</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'一只没有耳朵'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'一只没有尾巴'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token string">'真奇怪'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//111</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//222</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//333</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//444</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>生成器函数的参数传递</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//AAA</span>    <span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">111</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//BBB</span>    <span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">222</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CCC</span>    <span class="token keyword">let</span> three <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">333</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DDD</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//执行获取迭代器对象</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token string">'AAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next方法可以传入实参</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'BBB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>作为第<span class="token number">1</span>个<span class="token keyword">yield</span>的整体返回值console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'CCC'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>作为第<span class="token number">2</span>个<span class="token keyword">yield</span>的整体返回值console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'DDD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>作为第<span class="token number">3</span>个<span class="token keyword">yield</span>的整体返回值</code></pre></li><li><p>生成器实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//异步编程</span><span class="token comment" spellcheck="true">//1s后控制台输出111 2s后输出222</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接着向下遍历实现实例</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用生成器函数</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到柚の小屋</title>
      <link href="/undefined/62416.html"/>
      <url>/undefined/62416.html</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>欢迎来到柚子的小屋<br>这里记录本人学习所记录的各种笔记<br>当然了偶尔也会分享一些小事情，希望能对你有所帮助</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>你可以通过‘分类’、‘标签’以及‘导航’搜索查看各类知识的笔记</p></blockquote><h3 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h3><blockquote><p>本站是基于Hexo+matery搭建的个人博客静态网页<br>如果你也想拥有一个属于自己的个人博客，那么可以在B站或者百度搜索学习<br>不仅Hexo，还有Wordpress、Hugo、Halo等等也可以有同样的效果进行搭建</p></blockquote><p>下面推荐B站两个大佬的教学视频：</p><ul><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.999.0.0">CodeSheep：手把手教你从0开始搭建自己的个人博客</a></li><li><a href="https://www.bilibili.com/video/BV14q4y1R7XM?spm_id_from=333.999.0.0">程序员鱼皮：手把手带你从0搭建个人博客</a></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>生命很短暂，一定要活出自己想要的模样，加油哦！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 欢迎 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
