<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java个人笔记</title>
      <link href="/undefined/758.html"/>
      <url>/undefined/758.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java个人笔记"><a href="#Java个人笔记" class="headerlink" title="Java个人笔记"></a>Java个人笔记</h1><blockquote><p>记录适合自己的笔记，不适合新手观看</p></blockquote><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><ul><li><p>字符类型与字符串类型</p><p>字符串用双引号括起来，而单引号括起来的内容只有一个：”HelloWorld”，’a’，’0’，’中’</p></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>数据类型</th><th>关键字</th><th>取值范围</th><th>内存占用</th></tr></thead><tbody><tr><td>整数</td><td>byte</td><td>-128~127</td><td>1</td></tr><tr><td></td><td>short</td><td>-32768~32767</td><td>2</td></tr><tr><td></td><td>int</td><td>-2147483648~2147483647（10位）</td><td>4</td></tr><tr><td></td><td>long</td><td>-9223372036854775808~9223372036854775807（19位）</td><td>8</td></tr><tr><td>浮点数</td><td>float</td><td>-3.401298e-38到3.402823e+38</td><td>4</td></tr><tr><td></td><td>double</td><td>-4.9000000e-324到1.797693e+308</td><td>8</td></tr><tr><td>字符</td><td>char</td><td>0-65535</td><td>2</td></tr><tr><td>布尔</td><td>boolean</td><td>true，false</td><td>1</td></tr></tbody></table><p>定义变量层面：定义long类型的变量，需要在数据值的后面加上一个L作为后缀，定义float类型的变量，需要在数据值后面加上一个F作为后缀</p><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><blockquote><p>取值范围：byte &lt; short &lt; int &lt; long &lt; float &lt; double</p></blockquote><ol><li><p>隐式转换</p><ul><li>转换规则：<ul><li>数据类型不一样，不能进行计算，需要转成一样的才能进行计算，取值范围小的和取值范围大的进行运算，小的会先提升为大的（隐式转换），再进行运算。</li><li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算</li></ul></li></ul></li><li><p>显示转换（强转</p><ul><li><p>如果把一个取值范围大的数值，赋值给取值范围小的变量。是不允许直接赋值的。如果一定要这么做就需要加入强制转换，有可能会导致转换错误。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>)a;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>计组复习（原码、反码、补码</p><blockquote><p>1个字节范围-128~127</p></blockquote><ul><li><p>原码</p><p>规则：<strong>十进制数据的二进制表现形式，最左边的是符号位，0为正，1为负</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01111111</span>    <span class="comment">// 127</span></span><br><span class="line"><span class="number">11111111</span>    <span class="comment">// -127</span></span><br></pre></td></tr></tbody></table></figure><p>利用原码进行计算的时候，如果是正数没有问题，但是如果是负数计算，结果就出错，实际运算方向，跟正确的运算方向是相反的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -1 + 1</span></span><br><span class="line"><span class="number">10000001</span> + <span class="number">00000001</span> <span class="comment">// =&gt; 10000010  // -2</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>反码</p><p>为了解决原码不能计算负数的问题出现。规则：<strong>正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1，1变0。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-1 + 1</span></span><br><span class="line"><span class="number">11111110</span> + <span class="number">00000001</span> <span class="comment">// =&gt; 11111111，是-0的反码</span></span><br></pre></td></tr></tbody></table></figure><p>负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0，跟实际结果会有1的偏差</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-0 + 1</span></span><br><span class="line"><span class="number">11111111</span> + <span class="number">00000001</span> <span class="comment">// =&gt; 00000000，为+0</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>补码</p><p>为了解决负数计算时跨0的问题而出现的。规则：<strong>正数的补码不变，负数的补码在反码的基础上+1</strong>。另外补码还能多记录一个特殊的值-128，该数据在1个字节下，没有原码和反码。所以计算机中的存储和计算都是以补码的形式进行的。</p></li></ul></li><li><p>原理</p><ul><li><p>隐式转换</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">// 0000 1010（1个字节）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a; <span class="comment">// 0000 0000 0000 0000 0000 0000 0000 1010（4个字节）</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>显示转换</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">200</span>;  <span class="comment">// 0000 0000 0000 0000 0000 0000 1100 1000</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)a; <span class="comment">// 1100 1000（补码</span></span><br><span class="line">        System.out.println(b); <span class="comment">// -56</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h3 id="java内存分配"><a href="#java内存分配" class="headerlink" title="java内存分配"></a>java内存分配</h3><ul><li>栈：方法运行时使用的内存，比如main方法运行，进入方法栈中执行，方法执行完毕后出栈</li><li>堆：存储对象或者数组，通过new来创建的，都存储在堆内存中</li><li>方法区：存储可以运行的class文件</li><li>本地方法栈：JVM在使用操作系统功能的时候使用，与开发无关</li><li>给cpu使用，与开发无关</li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>作用：在创建对象的时候给成员变量进行赋值的</li><li>特点：<ol><li>方法名与类名相同，大小写也要一致</li><li>没有返回值类型，连void也没有</li></ol></li><li>执行时机：<ol><li>创建对象的时候由虚拟机调用，不能手动调用构造方法</li><li>每创建一次对象，就会调用一次构造方法</li></ol></li><li>注意事项<br>1. 如果没有定义构造方法，系统将给出一个默认的无参数构造方法，如果定义了构造方法，系统不再提供默认的构造方法<br>1. 有参构造方法，和无参构造方法，两者方法名相同，但是参数不同，这叫构造方法的重载<br>1. 开发建议无论是否使用，都手动书写上无参构造方法和有参构造方法。</li></ul><img src="../imgs/java/image-20230924233734604.png"><h3 id="this的内存原理"><a href="#this的内存原理" class="headerlink" title="this的内存原理"></a>this的内存原理</h3><ul><li>作用：区分局部变量和成员变量</li><li>本质：所在方法调用者的地址值</li></ul><img src="../imgs/java/image-20230924235307920.png"><h3 id="StringBuilder-amp-StringJoiner"><a href="#StringBuilder-amp-StringJoiner" class="headerlink" title="StringBuilder&amp;StringJoiner"></a>StringBuilder&amp;StringJoiner</h3><p>StringBuilder可以看成是一个容器，创建之后里面的内容是可变的</p><p>作用：提高字符串的操作效率</p><p>StringJoiner用于字符串拼接，可以指定间隔字符，还可以指定前缀与后缀</p><img src="../imgs/java/image-20230925232633951.png"><h3 id="字符串原理"><a href="#字符串原理" class="headerlink" title="字符串原理"></a>字符串原理</h3><ol><li>存储的内存原理<ul><li>直接赋值会复用字符串常量池中的</li><li>new出来的不会复用，而是开辟一个新的空间</li></ul></li><li>==号比较<ul><li>基本数据类型比较数据值</li><li>引用数据类型比较地址值</li></ul></li><li>字符串拼接底层原理<ul><li>如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串</li><li>如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存。</li></ul></li></ol><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合与数组的对比：</p><ul><li>长度：数组长度固定，集合的长度可变</li><li>数组可以存储基本数据类型和引用数据类型，而集合只能存储引用数据类型，基本类型可以使用包装类，比如int-&gt;Integer，char-&gt;Character，其余都是首字符大写</li></ul><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><blockquote><p>仅记录使用层面，原理后续补上</p></blockquote><img src="../imgs/java/image-20230926000450497.png"><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><blockquote><p>static表示静态，是Java中的一个修饰符，可以修饰成员变量、成员方法</p></blockquote><ul><li><p>被static修饰的成员变量，叫做静态变量</p><ol><li>特点<ul><li>被该类所有实例的对象所共享</li><li>不属于实例对象，属于类</li><li>随着类的加载而加载，优先于对象存在于堆内存的静态区（JDK8以后</li></ul></li><li>调用方式<ul><li>类名调用（推荐</li><li>实例对象调用</li></ul></li></ol></li><li><p>被static修饰的成员方法，叫做静态方法</p><blockquote><p>一般会将工具类的构造方法private私有化，不让外部new实例对象，因为没有意义</p></blockquote><ol><li>特点<ul><li>多用在测试类和工具类中</li><li>Javabean类中很少会用</li></ul></li><li>调用方式<ul><li>类名调用（推荐</li><li>对象名调用</li></ul></li></ol></li><li><p>注意事项</p><ol><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问所有</li><li>静态方法中没有this关键字（因为this代表调用者本身的地址，静态代表共享，所以Java是这样设计的</li></ol></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>Java只能单继，即一个类只能继承一个直接父类，不支持多继承，但是支持多层继承</li><li>Java中所有的类都直接或间接继承与Object类</li><li>子类只能访问父类中非私有的成员</li><li>继承中成员变量访问特点：就近原则</li></ol><p>当父类的方法不能满足子类现在的需求时，需要进行方法重写，即子类书写父类一样的方法声明，并在方法上加上@Override注解</p><ul><li>继承中的构造方法<ul><li>子类不能继承父类的构造方法，但是可以通过super调用</li><li>子类构造方法的第一行，有一个默认的super()，默认先访问父类中的无参构造方法，再执行自己，保证父类数据初始化</li><li>如果想要在子类中调用父类的有参构造，必须手动书写</li></ul></li></ul><img src="../imgs/java/image-20230927235634766.png"><blockquote><p>后续待学：集合进阶-Map、Stream流、异常、文件、IO流、多线程、网络编程、反射</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题总结</title>
      <link href="/undefined/23574.html"/>
      <url>/undefined/23574.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h1><h2 id="1-重绘与重排（回流）"><a href="#1-重绘与重排（回流）" class="headerlink" title="1. 重绘与重排（回流）"></a>1. 重绘与重排（回流）</h2><p><span style="color:#9e6dd5">重绘不一定导致重排，但重排一定会导致重绘</span></p><blockquote><p>重绘</p></blockquote><p>重绘（Redraw）：某些元素的外观被改变所触发的浏览器行为；例如修改元素的填充颜色</p><blockquote><p>重排（回流）</p></blockquote><p>重排（Reflow）：重新生成布局，重新排列元素（重新计算各节点和css具体的大小和位置：渲染树需要重新计算所有受影响的节点）；例如修改元素的宽高；</p><blockquote><p>哪些操作会导致重绘和重排</p></blockquote><p><span style="color:#9e6dd5">下面情况会发生重绘：</span></p><ul><li>color、background</li><li>border-style</li><li>border-radius</li><li>text-decoration</li><li>box-shadow</li><li>outline</li></ul><p><span style="color:#9e6dd5">下面情况会发生重排：</span></p><ul><li>页面初始渲染，这是开销最大的一次重排</li><li>添加 / 删除可见的DOM元素</li><li>改变元素位置</li><li>改变元素尺寸，比如边距、填充、边框、宽度和高度等</li><li>改变元素字体大小</li><li>改变浏览器窗口尺寸，比如resize事件发生时</li><li>激活CSS伪类（例如:hover）</li></ul><blockquote><p>优化建议：</p></blockquote><p><span style="color:#9e6dd5"><strong>核心观念：减少重排次数和减小重排范围</strong></span></p><ul><li><p>样式集中改变（减少重排次数）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderEle = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'demo'</span>);</span><br><span class="line">renderEle.<span class="property">style</span>.<span class="property">color</span> = <span class="string">'red'</span>; <span class="comment">// 导致重绘</span></span><br><span class="line">renderEle.<span class="property">style</span>.<span class="property">background</span>= <span class="string">'#ccc'</span>; <span class="comment">// 导致重绘</span></span><br><span class="line">renderEle.<span class="property">style</span>.<span class="property">padding</span> = <span class="string">'15px 20px'</span>; <span class="comment">// 导致重排（重排会引起重绘）</span></span><br></pre></td></tr></tbody></table></figure><p>以上操作会导致 3次重绘 1次重排; 可以动态添加class，只会导致1次重排（重排会引起重绘），从而减少重绘次数;</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'demo'</span>).<span class="property">className</span> = <span class="string">'demo'</span>; <span class="comment">// 添加class 统一添加/修改样式</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-class">.demo</span> {</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>将DOM离线（修改display属性临时将节点从文档流中脱离，然后再恢复）</p></li><li><p>脱离文档流：使用absolute或fixed脱离文档流（减少重排范围）</p></li></ul><h2 id="2-常用的meta标签"><a href="#2-常用的meta标签" class="headerlink" title="2. 常用的meta标签"></a>2. 常用的meta标签</h2><blockquote><p>meta标签一般放在整个html页面的head部分，在MDN中对它这样定义：</p><p>meta是<strong>文档级元数据元素</strong>，用来表示那些不能由其它 HTML 元相关元素（<code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>或 <code>&lt;title&gt;</code>）之一表示的任何元数据。</p></blockquote><blockquote><p>name属性</p></blockquote><p><code>name</code>和<code>content</code>一起使用，前者表示的元数据的名称，后者是元数据的值</p><ul><li><p>author</p><p>用来表示网页的作者的名字，例如某个组织或机构</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"aaa@mail.abc.com"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>description</p><p>是一段简短而精确的、对页面内容的描述</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 淘宝网 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>keyword</p><p>与页面内容相关的关键词，使用逗号分隔，某些搜索引擎在遇到这些关键字时，会用这些关键字对文档进行分类。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keyword"</span> <span class="attr">content</span>=<span class="string">"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>viewpoint</p><p>为viewpoint（视口）的初始大小提供指示。目前仅用于移动设备</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewpoint"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>with</code>用来设置viewpoint的宽度为设备宽度；</p><p>initial-scale为设备宽度与viewpoint大小之间的缩放比例</p></li></ul><blockquote><p>http-equiv</p></blockquote><ul><li><p>X-UA-Compatible</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=dege,chrome=1"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>IE=edge</code>告诉浏览器，以当前浏览器的最新版本来渲染，IE9就以IE9版本来渲染</p><p><code>chrom=1</code>告诉浏览器，如果IE浏览器安装了<code>Google Chrome Frame</code>插件，就以chrome内核来渲染页面</p></li><li><p>content-type</p><p>用来声明文档类型和字符集</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="3-HTML5新特性"><a href="#3-HTML5新特性" class="headerlink" title="3. HTML5新特性"></a>3. HTML5新特性</h2><blockquote><p>1、语义化标签</p></blockquote><ul><li><code>&lt;header&gt;&lt;/header&gt;</code>头部区域标签，块级标签</li><li><code>&lt;footer&gt;&lt;/footer&gt;</code>  底部区域标签，块级标签</li><li><code>&lt;nav&gt;&lt;/nav&gt;</code> 导航区域标签，块级标签</li><li><code>&lt;article&gt;&lt;/article&gt;</code> 文章段落标签，块级标签</li><li><code>&lt;aside&gt;&lt;/aside&gt;</code> 侧边栏区域标签，块级标签</li><li><code>&lt;section&gt;&lt;/section&gt;</code> 单词翻译：部分，h5官方文档描述：定义 section，块级标签</li><li><code>&lt;detailes&gt;&lt;/detailes&gt;</code> 单词翻译：细节，h5官方文档描述：定义元素的细节，块级标签</li><li><code>&lt;time&gt;&lt;/time&gt;</code> 时间区域标签，内联标签</li><li><code>&lt;mark&gt;&lt;/mark&gt;</code> 标记记号标签，内联标签</li></ul><blockquote><p>2、新表单类型</p></blockquote><p><code>input</code>表单标签本身已有不少类型了，但是h5为了满足开发需求，同样还新增了不少的类型：</p><ul><li><code>&lt;input type="email" /&gt;</code>  e-mail 地址的输入域</li><li><code>&lt;input type="number" /&gt;</code> 数字输入域</li><li><code>&lt;input type="url" /&gt;</code> URL 地址的输入域</li><li><code>&lt;input type="search" /&gt;</code> 用于搜索域</li><li><code>&lt;input type="color" /&gt;</code> 用于定义选择颜色</li><li><code>&lt;input type="date" /&gt;</code> date类型为时间选择器</li><li><code>&lt;input type="tel" /&gt;</code> 电话号码输入域</li></ul><p>HTML5新增表单属性</p><ul><li><code>placehoder</code> 属性，简短的提示在用户输入值前会显示在输入域上。即我们常见的输入框默认提示，在用户输入后消失。</li><li><code>required</code>  属性，是一个 boolean 属性。要求填写的输入域不能为空</li><li><code>step</code> 属性，为输入域规定合法的数字间隔。</li></ul><blockquote><p>3、视频和音频</p></blockquote><blockquote><p>4、Canvas绘图</p></blockquote><blockquote><p>5、SVG</p></blockquote><blockquote><p>6、拖放（Drag和drop）</p></blockquote><p>​    在h5之前实现拖拽功能，其实用的是一种模拟方式，鼠标<code>onmousedown</code>时，获取当前的一些信息，然后在<code>onmousemove</code>时不断更新推拽对象的<code>left</code>和<code>top</code>值，最后在<code>onmouseup</code>时对推拽对象彻底赋值，并进行释放后一系列的程序操作。现在h5出来后呢，不在需要模拟了，因为它已经有标准的事件api了。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"draggable"</span> <span class="attr">class</span>=<span class="string">"draggable"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dragEl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">'draggable'</span>);</span><br><span class="line"><span class="keyword">var</span> l = <span class="literal">null</span>, t = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">dragEl.<span class="property">ondragstart</span> = <span class="keyword">function</span> (<span class="params">e</span>) { <span class="comment">// 准备推拽时</span></span><br><span class="line">l = e.<span class="property">clientX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>, t = e.<span class="property">clientY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dragEl.<span class="property">ondrag</span> = <span class="keyword">function</span> (<span class="params">e</span>) {  <span class="comment">// 拖拽进行时</span></span><br><span class="line">    <span class="keyword">var</span> x = e.<span class="property">clientX</span>, y = e.<span class="property">clientY</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">left</span> = x - l + <span class="string">'px'</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">top</span> = y - t + <span class="string">'px'</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, l , t)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dragEl.<span class="property">ondragend</span> = <span class="keyword">function</span> (<span class="params">e</span>) {   <span class="comment">// 拖拽结束时</span></span><br><span class="line">    <span class="keyword">var</span> x = e.<span class="property">clientX</span>, y = e.<span class="property">clientY</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">left</span> = x - l + <span class="string">'px'</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">top</span> = y - t + <span class="string">'px'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>7、地理定位</p></blockquote><p>​    地理定位这个特性，故名思意，就是获取用户位置信息的。通过<code>getCurrentPosition()</code>获取一系列定位信息，<code>getCurrentPosition()</code>有两个回调函数参数，获取地理位置成功的回调和失败的回调。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(successPos)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">successPos</span> (pos){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'用户定位数据获取成功'</span>)</span><br><span class="line"><span class="comment">//console.log(arguments);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'定位时间：'</span>,pos.<span class="property">timestamp</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'经度：'</span>,pos.<span class="property">coords</span>.<span class="property">longitude</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'纬度：'</span>,pos.<span class="property">coords</span>.<span class="property">latitude</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'海拔：'</span>,pos.<span class="property">coords</span>.<span class="property">altitude</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'速度：'</span>,pos.<span class="property">coords</span>.<span class="property">speed</span>)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>8、Web存储</p></blockquote><p>web存储提供了两个存储方式:</p><ul><li><code>localStorage</code>,没有时间限制的数据存储</li><li><code>sessionStorage</code>,就是网页还没有关闭的情况下的存储，网页窗口关闭，则数据销毁。</li></ul><p>在之前，这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。</p><blockquote><p>9、WebSocket</p></blockquote><blockquote><p>10、Web Worker</p></blockquote><h2 id="4、script标签的defer和async"><a href="#4、script标签的defer和async" class="headerlink" title="4、script标签的defer和async"></a>4、script标签的defer和async</h2><blockquote><p>defer</p></blockquote><p>​    这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在<code>&lt;script&gt;</code>元素中设置<code>defer</code>属性，相当于告诉浏览器立即下载，但延迟执行。</p><blockquote><p>async</p></blockquote><p>​    这个属性与<code>defer</code>类似，都用于改变处理脚本的行为。同样与<code>defer</code>类似，<code>async</code>只适用于外部脚本文件，并告诉浏览器立即下载文件。但与<code>defer</code>不同的是，标记为<code>async</code>的脚本并不保证按照它们的先后顺序执行。</p><p>也就是说<code>async</code>是乱序的，而<code>defer</code>是顺序执行</p><h1 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h1><h2 id="1、BFC"><a href="#1、BFC" class="headerlink" title="1、BFC"></a>1、BFC</h2><blockquote><p>BFC是什么？</p></blockquote><p><code>BFC</code> 全称：<code>Block Formatting Context</code>， 名为 “块级格式化上下文”。</p><p>简单来说就是，<code>BFC</code>是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局。那么怎么使用<code>BFC</code>呢，<code>BFC</code>可以看做是一个<code>CSS</code>元素属性</p><blockquote><p>开启BFC条件</p></blockquote><ul><li>overflow: hidden</li><li>display: inline-block</li><li>position: absolute</li><li>position: fixed</li><li>display: flex</li><li>display: table-cell</li></ul><blockquote><p>BFC解决的问题</p></blockquote><ul><li>使用float脱离文档流，高度塌陷</li><li>margin边距重叠</li></ul><h2 id="2、Flex布局"><a href="#2、Flex布局" class="headerlink" title="2、Flex布局"></a>2、Flex布局</h2><h3 id="父级容器的属性"><a href="#父级容器的属性" class="headerlink" title="父级容器的属性"></a>父级容器的属性</h3><ul><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>flex-flow（flex-direction和flex-wrap的简写，默认值为row nowrap）</li><li>align-content</li></ul><blockquote><p>1、flex-direction</p></blockquote><p>flex-direction属性决定主轴的方向，它的属性有：column-reverse、column、row（默认值）、row-reverse，分别对应下图。</p><img src="../imgs/flex-direction.png"><blockquote><p>2、flex-wrap</p></blockquote><p>flex-wrap属性定义，如果一条轴线排不下，如何换行。它可能取三个值：nowrap（默认值，不换行）、wrap（换行，第一行在上方）、wrap-reverse（换行，第一行在下方）。</p><blockquote><p>3、justify-content</p></blockquote><p>justify-content属性定义了项目在<strong>主轴</strong>上的对齐方式。</p><img src="..\imgs\justify-content.png"><blockquote><p>4、align-items</p></blockquote><p>align-items属性定义项目在交叉轴上如何对齐。</p><img src="..\imgs\align-items.png"><h3 id="子级容器的属性"><a href="#子级容器的属性" class="headerlink" title="子级容器的属性"></a>子级容器的属性</h3><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>align-self</li><li>flex</li></ul><blockquote><p>1、order属性</p></blockquote><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><blockquote><p>2、flex-grow属性</p></blockquote><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><blockquote><p>3、flex-shrink属性</p></blockquote><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><blockquote><p>4、flex-basis属性</p></blockquote><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><blockquote><p>5、align-self属性</p></blockquote><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示<strong>继承父元素的align-items属性</strong>，如果没有父元素，则等同于stretch。</p><h1 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h1><h2 id="1、原型和原型链"><a href="#1、原型和原型链" class="headerlink" title="1、原型和原型链"></a>1、原型和原型链</h2><p><span style="color:#9e6dd5">三个重要的属性：<code>prototype</code>、<code>__proto__</code>、<code>constructor</code></span></p><blockquote><p><code>prototype</code>显示原型</p></blockquote><p>每一个函数都有一个prototype属性（函数特有，普通对象是没有这个属性的）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">// prototype 是函数才会有的属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">"Kevin"</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></tbody></table></figure><p>原型：每一个JavaScript对象在创建的时候就会与之关联另外一个对象，这个对象就是我们所说的原型，而每一个对象都会从原型”继承”属性</p><blockquote><p><code>__proto__</code>隐式原型</p></blockquote><p>这是每一个JavaScript对象都具有的一个属性，这个属性会指向该对象的原型，即作为实例对象和实例原型的之间的链接桥梁,<strong>这里强调，是对象，同样，因为函数也是对象，所以函数也有这个属性。</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>constructor</code></p></blockquote><p>每一个原型都有一个<code>constructor</code>属性指向关联的构造函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>三个属性的关系图：</p><img src="..\imgs\原型.png"><blockquote><p>原型和原型链</p></blockquote><p>当读取实例的属性时，如果找不到，就会查找对象关联的原型中的属性，如果还查不到，就去原型的原型，一直找到最顶层为止，到最后会找到<code>Object.prototype</code>的原型上，也就是``Object.prototype.<strong>proto</strong> === null<code>，查找到这就停止了会返回一个</code>undefined`的结果。</p><p>关系图：</p><img src="../imgs/原型链关系图.png"><h2 id="2、浏览器渲染过程与V8引擎原理"><a href="#2、浏览器渲染过程与V8引擎原理" class="headerlink" title="2、浏览器渲染过程与V8引擎原理"></a>2、浏览器渲染过程与V8引擎原理</h2><p>当我们在浏览器上输入网址去访问一个页面时，首先会将域名通过DNS解析成ip地址，服务器会为我们返回index.html，浏览器去解析时遇到link标签时就去下载css资源，遇到script标签就去下载js文件，至此资源下载完毕，那么谁来解析HTML并将内容呈现？那就是<strong>浏览器内核</strong>，而JS又是一门高级编程语言，不被计算机所识别，需要<strong>JS引擎</strong>来解析。</p><blockquote><p>浏览器渲染过程</p></blockquote><img src="..\imgs\浏览器渲染过程.png"><p>首先内核通过<strong>HTML Parser</strong>将HTML转化为<strong>DOM Tree</strong>，再通过<strong>CSS Parser</strong>对CSS进行解析为<strong>Style Rules</strong>，然后将DOM Tree 与 Style Rules<strong>附加在一起生成渲染树</strong>Render Tree，最后再将Render Tree进行<strong>布局</strong>然后<strong>绘制</strong>展示出来。</p><blockquote><p>V8引擎原理</p></blockquote><img src="../imgs/V8引擎.jpg"><p><strong>Parser</strong> 解析器：将源代码处理为AST（抽象语法树）</p><p><strong>Ignition</strong> 解释器：将AST转换为byteCode</p><p><strong>Turbofan</strong>  优化编译器：对于byteCode进行编译并对于代码进行优化</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温数据结构—树(TS实现)</title>
      <link href="/undefined/26758.html"/>
      <url>/undefined/26758.html</url>
      
        <content type="html"><![CDATA[<h2 id="树的介绍"><a href="#树的介绍" class="headerlink" title="树的介绍"></a>树的介绍</h2><blockquote><p>​    根据子节点的数量不同可以分为二叉树、三叉树、多叉树，最常见的是二叉树，每个节点<strong>最多</strong>有两个子节点，根据节点又可分为完全二叉树（每个节点都有两个子节点，最后一层除外，并且是从左到右顺序连接，中间不能空缺）、满二叉树（每个节点要么有两个子节点，要么没有子节点，最后一层除外）、完美二叉树（完整的）等等。</p></blockquote><p><span style="border-left:5px solid #cf8ef5">   ps: 图片来自bilibili峰华前端工程师，做的挺好的</span></p><img src="..\imgs\完全二叉树.png"><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ol><li><p>树的节点</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树的节点，身上有value值，left保存左子节点的引用，right保存右子节点的引用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">left</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">TreeNode</span> | <span class="literal">null</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value: <span class="built_in">any</span>, left?: TreeNode, right?: TreeNode</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = left ? left : <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = right ? right : <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>二叉树</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树，里面保存根节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> {</span><br><span class="line">    <span class="attr">root</span>: <span class="title class_">TreeNode</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">root: TreeNode</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">root</span> = root</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>遍历方法</p><blockquote><p>二叉树的遍历方法分为：</p><p>广度优先遍历</p><p>深度优先遍历：前序、中序、后序</p></blockquote><ul><li><p>广度优先遍历</p><blockquote><ul><li><p>按层来一层一层地去遍历，不分左右先后顺序</p></li><li><p>大体思路是把根节点放入任务队列中，然后从队列里取出节点进行遍历，再把当前遍历节点的所有子节点追加到队尾，按照先进先出原则出队列</p></li><li><p>应用：搜索引擎爬虫、社交网络查找人脉关系、导航寻找最短路径等</p></li></ul></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">breadthFirstTraversal</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">any</span>[] = [];    <span class="comment">// 遍历结果，存放树节点的value:any</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">queue</span>: <span class="title class_">TreeNode</span>[] = [];     <span class="comment">// 维护队列</span></span><br><span class="line">    queue.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) {</span><br><span class="line">        <span class="keyword">let</span> current = queue.<span class="title function_">shift</span>();    <span class="comment">//使用shift表示队列，先进先出原则</span></span><br><span class="line">        result.<span class="title function_">push</span>(current?.<span class="property">value</span>)</span><br><span class="line">        <span class="keyword">if</span> (current?.<span class="property">left</span>) {</span><br><span class="line">            queue.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (current?.<span class="property">right</span>) {</span><br><span class="line">            queue.<span class="title function_">push</span>(current.<span class="property">right</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>深度优先遍历</p><ul><li><p>前序</p><blockquote><p>​    说一下这里用递归的话，如果直接给外部使用是要传递自身的根节点才能用，显然很鸡肋，所以使用private定义为私有函数，重新声明一个调用就行</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前序 根 -&gt; 左 -&gt; 右</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">traversePreOrderFn</span>(<span class="params">treeNode: TreeNode | <span class="literal">null</span>, result: <span class="built_in">any</span>[] = []</span>) {</span><br><span class="line">    <span class="keyword">if</span> (treeNode) {</span><br><span class="line">        result.<span class="title function_">push</span>(treeNode.<span class="property">value</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(treeNode.<span class="property">left</span>, result)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(treeNode.<span class="property">right</span>, result)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="title function_">traversePreOrder</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">traversePreOrderFn</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>中序</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序： 左 -&gt; 根 -&gt; 右</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">traverseInOrderFn</span>(<span class="params">treeNode: TreeNode | <span class="literal">null</span>, result: <span class="built_in">any</span>[] = []</span>) {</span><br><span class="line">    <span class="keyword">if</span> (treeNode) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(treeNode.<span class="property">left</span>, result)</span><br><span class="line">        result.<span class="title function_">push</span>(treeNode.<span class="property">value</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(treeNode.<span class="property">right</span>, result)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="title function_">traverseInOrder</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>后序</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后序： 左 -&gt; 右 -&gt; 根</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">traversePostOrderFn</span>(<span class="params">treeNode: TreeNode | <span class="literal">null</span>, result: <span class="built_in">any</span>[] = []</span>) {</span><br><span class="line">    <span class="keyword">if</span> (treeNode) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(treeNode.<span class="property">left</span>, result)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">traverseInOrderFn</span>(treeNode.<span class="property">right</span>, result)</span><br><span class="line">        result.<span class="title function_">push</span>(treeNode.<span class="property">value</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="title function_">traversePostOrder</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">traversePostOrderFn</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><p>测试</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">13</span>, <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>), <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">const</span> myBinaryTree = <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(root)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广度优先遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">breadthFirstTraversal</span>());</span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">traversePreOrder</span>());</span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">traverseInOrder</span>());</span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">traversePreOrder</span>());</span><br></pre></td></tr></tbody></table></figure><img src="..\imgs\二叉树递归打印.png"></li><li><p>非递归版（迭代）</p><blockquote><p>直接上完整的代码吧</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 树的节点，身上有value值，left保存左子节点的引用，right保存右子节点的引用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">left</span>: <span class="title class_">TreeNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="attr">right</span>: <span class="title class_">TreeNode</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value: <span class="built_in">any</span>, left?: TreeNode, right?: TreeNode</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = left ? left : <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = right ? right : <span class="literal">undefined</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树，里面保存根节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> {</span><br><span class="line">    <span class="attr">root</span>: <span class="title class_">TreeNode</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">root: TreeNode</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">root</span> = root</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 广度优先遍历</span></span><br><span class="line">    <span class="comment">// 大体思路是把根节点放入任务队列中，然后从队列里取出节点进行遍历</span></span><br><span class="line">    <span class="comment">// 再把当前遍历节点的所有子节点追加到队尾，按照先进先出原则出队列</span></span><br><span class="line">    <span class="comment">// 应用：搜索引擎爬虫、社交网络查找人脉关系、导航寻找最短路径等</span></span><br><span class="line">    <span class="title function_">breadthFirstTraversal</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">any</span>[] = [];    <span class="comment">// 遍历结果，存放树节点的value</span></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">queue</span>: <span class="title class_">TreeNode</span>[] = [];     <span class="comment">// 维护队列</span></span><br><span class="line">        queue.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">root</span>);</span><br><span class="line">        <span class="keyword">while</span> (queue.<span class="property">length</span>) {</span><br><span class="line">            <span class="keyword">let</span> current = queue.<span class="title function_">shift</span>();    <span class="comment">//使用shift表示队列，先进先出原则</span></span><br><span class="line">            result.<span class="title function_">push</span>(current?.<span class="property">value</span>)</span><br><span class="line">            <span class="keyword">if</span> (current?.<span class="property">left</span>) {</span><br><span class="line">                queue.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (current?.<span class="property">right</span>) {</span><br><span class="line">                queue.<span class="title function_">push</span>(current.<span class="property">right</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 深度优先遍历 -&gt; 前序 中序 后序</span></span><br><span class="line">    <span class="comment">// 前序 根 -&gt; 左 -&gt; 右</span></span><br><span class="line">    <span class="title function_">traversePreOrder</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">TreeNode</span> | <span class="literal">undefined</span> = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">stack</span>: <span class="title class_">TreeNode</span>[] = [];</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">any</span>[] = []</span><br><span class="line">        <span class="keyword">while</span> (current || stack.<span class="property">length</span>) {</span><br><span class="line">            <span class="keyword">while</span> (current) {</span><br><span class="line">                result.<span class="title function_">push</span>(current.<span class="property">value</span>)</span><br><span class="line">                stack.<span class="title function_">push</span>(current);</span><br><span class="line">                current = current.<span class="property">left</span></span><br><span class="line">            }</span><br><span class="line">            current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            current = current?.<span class="property">right</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 中序： 左 -&gt; 根 -&gt; 右</span></span><br><span class="line">    <span class="title function_">traverseInOrder</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">TreeNode</span> | <span class="literal">undefined</span> = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">stack</span>: <span class="title class_">TreeNode</span>[] = [];</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">any</span>[] = []</span><br><span class="line">        <span class="keyword">while</span> (current || stack.<span class="property">length</span>) {</span><br><span class="line">            <span class="keyword">while</span> (current) {</span><br><span class="line">                stack.<span class="title function_">push</span>(current);</span><br><span class="line">                current = current.<span class="property">left</span></span><br><span class="line">            }</span><br><span class="line">            current = stack.<span class="title function_">pop</span>();</span><br><span class="line">            result.<span class="title function_">push</span>(current?.<span class="property">value</span>)</span><br><span class="line">            current = current?.<span class="property">right</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 后序： 左 -&gt; 右 -&gt; 根</span></span><br><span class="line">    <span class="title function_">traversePostOrder</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">TreeNode</span> | <span class="literal">undefined</span> = <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">stack</span>: <span class="title class_">TreeNode</span>[] = [];</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">result</span>: <span class="built_in">any</span>[] = []</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">last</span>: <span class="title class_">TreeNode</span> | <span class="literal">undefined</span>;    <span class="comment">//标记上一个访问的节点</span></span><br><span class="line">        <span class="keyword">while</span> (current || stack.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">while</span> (current) {</span><br><span class="line">                stack.<span class="title function_">push</span>(current);</span><br><span class="line">                current = current.<span class="property">left</span></span><br><span class="line">            }</span><br><span class="line">            current = stack[stack.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!current.<span class="property">right</span> || current.<span class="property">right</span> == last) {</span><br><span class="line">                current = stack.<span class="title function_">pop</span>();</span><br><span class="line">                result.<span class="title function_">push</span>(current?.<span class="property">value</span>);</span><br><span class="line">                last = current;</span><br><span class="line">                current = <span class="literal">undefined</span>; <span class="comment">// 继续弹栈</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                current = current.<span class="property">right</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">13</span>, <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>), <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">const</span> myBinaryTree = <span class="keyword">new</span> <span class="title class_">BinaryTree</span>(root)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广度优先遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">breadthFirstTraversal</span>());</span><br><span class="line"><span class="comment">// 先序遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">traversePreOrder</span>());</span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">traverseInOrder</span>());</span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBinaryTree.<span class="title function_">traversePreOrder</span>());</span><br></pre></td></tr></tbody></table></figure><img src="..\imgs\二叉树迭代打印.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温数据结构—链表(TS实现)</title>
      <link href="/undefined/40631.html"/>
      <url>/undefined/40631.html</url>
      
        <content type="html"><![CDATA[<h2 id="链表的介绍"><a href="#链表的介绍" class="headerlink" title="链表的介绍"></a>链表的介绍</h2><blockquote><div style="font-weight:bolder">链表和数组类似，是一种<span style="color:#cf8ef5">线性的数据结构</span>，与数组不同的是，链表中的数据在内存中并<span style="color:#cf8ef5">不是顺序存储的</span>，而是通过在链表的每个元素中。保存<span style="color:#cf8ef5">指向下一个元素的引用</span>，来找到下一个元素。</div></blockquote><p><span style="border-left:5px solid #cf8ef5">&nbsp; &nbsp;ps: 图片来自bilibili峰华前端工程师，做的挺好的</span></p><img src="..\imgs\链表学习.png"><blockquote><p>对于这样的一个结构，可以分为一个节点类，以及一个链表类，这里就先拿单链表示例</p></blockquote><ol><li><p>节点（身上有value、next属性）</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单链表next为空表示在链表中是最后一个节点</span></span><br><span class="line"><span class="comment">// 如果是循环链表的话，next只能是Node节点类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">    <span class="attr">next</span>: <span class="title class_">Node</span> | <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value: <span class="built_in">any</span></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>链表类（单链表）</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head为空表示是空链表，每次new出来的一个链表实例都是空的,head定义为私有属性不让外部访问</span></span><br><span class="line"><span class="comment">// 你要访问也行，我是感觉没啥意义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> {</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">head</span>: <span class="title class_">Node</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">size</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="comment">// 构造函数，每次new实例都是一个空链表</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>往链表类追加常用方法</p><ul><li><p>新增节点，不返回值</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">append</span>(<span class="params">value: <span class="built_in">any</span></span>) {</span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">  <span class="comment">// 当前指向的节点   </span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) {</span><br><span class="line">    <span class="comment">//头结点为空，当前节点作为头结点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="comment">//遍历找到链表尾部</span></span><br><span class="line">    <span class="keyword">while</span> (current.<span class="property">next</span>) {</span><br><span class="line">      current = current.<span class="property">next</span>;</span><br><span class="line">    }</span><br><span class="line">    current.<span class="property">next</span> = node; <span class="comment">//在链表尾部加入新节点</span></span><br><span class="line">  }</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++; <span class="comment">//更新链表长度</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>插入节点，成功不返回值，失败抛出异常</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">insert</span>(<span class="params">index: <span class="built_in">number</span>, value: <span class="built_in">any</span></span>) {</span><br><span class="line">  <span class="comment">// 如果下标位于头部或者尾部</span></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span> || index === <span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>) <span class="variable language_">this</span>.<span class="title function_">append</span>(value)</span><br><span class="line">  <span class="comment">// 空链表，或者越界都抛出异常</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span> || index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">size</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">'尝试往不允许的下标插入值'</span>)</span><br><span class="line">  <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">let</span> position = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 因为前面已经做过判断了，所以前置节点和后置节点都不会为空</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(value)</span><br><span class="line">    <span class="keyword">while</span> (position !== index) {</span><br><span class="line">      current = current.<span class="property">next</span>!  <span class="comment">// 这里!表示当前元素存在</span></span><br><span class="line">      position++</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 当前current也就是index下的结点</span></span><br><span class="line">    node.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">    current.<span class="property">next</span> = node</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>往头部插入节点，不返回值</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prepend</span>(<span class="params">value: <span class="built_in">any</span></span>) {</span><br><span class="line">  <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">  <span class="comment">// 头部插入节点只需将这个节点的next指向头部</span></span><br><span class="line">  newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">  <span class="comment">// 然后头部指向也需改一下</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>根据索引删除节点，返回删除节点的值</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">remove</span>(<span class="params">index: <span class="built_in">number</span></span>) {</span><br><span class="line">  <span class="comment">//预防下标越界</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> &amp;&amp; index &gt; -<span class="number">1</span> &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">size</span>) {</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="variable language_">this</span>.<span class="property">head</span>; <span class="comment">//暂存当前位置</span></span><br><span class="line">    <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">previous</span>: <span class="title class_">Node</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 返回值</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: <span class="built_in">any</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) {</span><br><span class="line">      <span class="comment">//删除的位置是第一个。得改变头指针指向</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span>;</span><br><span class="line">      result = current.<span class="property">value</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">while</span> (position++ &lt; index) {</span><br><span class="line">        <span class="comment">//遍历到current处于index处</span></span><br><span class="line">        previous = current;</span><br><span class="line">        current = current!.<span class="property">next</span>;</span><br><span class="line">      }</span><br><span class="line">      previous!.<span class="property">next</span> = current!.<span class="property">next</span>;</span><br><span class="line">      result = current!.<span class="property">value</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span>--;</span><br><span class="line">    current = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//下标越界返回空，或者空链表</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>将链表转换成字符串</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">string</span> = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">while</span> (current) {</span><br><span class="line">    <span class="built_in">string</span> += current.<span class="property">value</span> + (current.<span class="property">next</span> ? <span class="string">","</span> : <span class="string">""</span>);</span><br><span class="line">    current = current.<span class="property">next</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>测试</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">list.<span class="title function_">append</span>(<span class="number">1</span>);</span><br><span class="line">list.<span class="title function_">append</span>(<span class="number">2</span>);</span><br><span class="line">list.<span class="title function_">append</span>(<span class="number">3</span>);</span><br><span class="line">list.<span class="title function_">prepend</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">remove</span>(<span class="number">2</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">remove</span>(<span class="number">3</span>));    <span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="property">size</span>);<span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">toString</span>());<span class="comment">// 0,1,3</span></span><br><span class="line"></span><br><span class="line">list.<span class="title function_">insert</span>(<span class="number">1</span>, <span class="number">1.5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">toString</span>()); <span class="comment">// 0,1,1.5,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  list.<span class="title function_">insert</span>(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">} <span class="keyword">catch</span> (error) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);<span class="comment">// 报错</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="..\imgs\链表学习_打印.png"></li></ol><blockquote><p>​    学完单向链表，那么双向链表，循环链表什么的无非就多了个previous指向的问题，或者next、previous指向不为空，用Ts慢慢去实现就好了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3+TypeScript补充与拓展</title>
      <link href="/undefined/63422.html"/>
      <url>/undefined/63422.html</url>
      
        <content type="html"><![CDATA[<h2 id="子父组件传参"><a href="#子父组件传参" class="headerlink" title="子父组件传参"></a>子父组件传参</h2><ul><li><p>父组件给子组件传参</p><ul><li><p>父组件通过v-bind绑定一个数据，然后子组件通过defineProps接收传过来的值</p> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Cart</span> <span class="attr">:data</span>=<span class="string">"data"</span>  <span class="attr">title</span>=<span class="string">"我是标题"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Cart</span> <span class="keyword">from</span> <span class="string">'./components/Cart.vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { reactive } <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = reactive&lt;number[]&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>子组件接收值</p><ul><li><p>通过defineProps来接收</p></li><li><p>如果使用的是Ts，则可以使用传递字面量类型的纯类型语法作为参数</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">        菜单区域 {{ title }}</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ data }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">type Props = {</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    title:string;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    data:number[];</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">}</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">defineProps<span class="tag">&lt;<span class="name">Props</span>&gt;</span>()</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>如果不是Ts</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>({</span><br><span class="line">    <span class="attr">title</span>:{</span><br><span class="line">        <span class="attr">default</span>:<span class="string">""</span>,</span><br><span class="line">        <span class="attr">type</span>:string</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">data</span>:<span class="title class_">Array</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>withDefaults是个函数也是无须引入开箱即用接受一个props函数第二个参数是一个对象设置默认值</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = {</span><br><span class="line">    title?: <span class="built_in">string</span>,</span><br><span class="line">    data?: <span class="built_in">number</span>[]</span><br><span class="line">}</span><br><span class="line"><span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(), {</span><br><span class="line">    <span class="attr">title</span>: <span class="string">"张三"</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><p>子组件给父组件传参</p><ul><li><p>通过defineEmits派发一个事件</p>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clickTap"</span>&gt;</span>派发给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { reactive } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = reactive&lt;number[]&gt;([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">'on-click'</span>]) <span class="comment">//数组，可以定义多个</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">clickTap</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">'on-click'</span>, list)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>在子组件绑定了一个click事件，然后通过defineEmits注册了一个自定义事件，点击click触发emit去调用我们注册的事件，然后传递参数</p></li><li><p>父组件接收子组件的事件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Cart</span> @<span class="attr">on-click</span>=<span class="string">"getList"</span>&gt;</span><span class="tag">&lt;/<span class="name">Cart</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Cart</span> <span class="keyword">from</span> <span class="string">'./components/Cart.vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { reactive } <span class="keyword">from</span> <span class="string">'vue'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">getList</span> = (<span class="params">list: number[]</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(list,<span class="string">'父组件接受子组件'</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul><h2 id="双问号语法"><a href="#双问号语法" class="headerlink" title="双问号语法"></a>双问号语法</h2><blockquote><p>Js：在双问号的左边如果是<code>null，undefined</code>时，就返回右边的值，如果没有就返回左边的值</p></blockquote><ul><li><p>例如</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> ?? [] <span class="comment">//[]</span></span><br><span class="line"><span class="literal">undefined</span> ?? <span class="number">0</span> <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> ?? [] <span class="comment">//0</span></span><br><span class="line"><span class="literal">false</span> ?? <span class="number">0</span> <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="TypeScript高级技巧（Pick，Partial等）"><a href="#TypeScript高级技巧（Pick，Partial等）" class="headerlink" title="TypeScript高级技巧（Pick，Partial等）"></a>TypeScript高级技巧（Pick，Partial等）</h2><h3 id="1-keyof和in"><a href="#1-keyof和in" class="headerlink" title="1. keyof和in"></a>1. keyof和in</h3><ul><li><p>keyof</p><blockquote><p>keyof与Object.keys略有相似，只不过keyof取interface的键</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> {</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// type keys = "x" | "y"</span></span><br><span class="line"><span class="keyword">type</span> keys = keyof <span class="title class_">Point</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>in</p><blockquote><p>in可以遍历枚举类型，例如</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Keys</span> = <span class="string">"a"</span> | <span class="string">"b"</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Obj</span> = {</span><br><span class="line">[p <span class="keyword">in</span> <span class="title class_">Keys</span>]:<span class="built_in">any</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// -&gt; {a:any,b:any}</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>keyof产生枚举类型，in使用枚举类型遍历，所以他们经常一起使用，看下Partial源码</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = {[P <span class="keyword">in</span> keyof T]?:T[P]};</span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面语句的意思是<code>keyof T</code>拿到<code>T</code>所有的属性名，然后<code>in</code>进行遍历，将值赋给P，最后<code>T[P]</code>取得相应属性的值</p></blockquote></li></ul><h3 id="Partial和Pick"><a href="#Partial和Pick" class="headerlink" title="Partial和Pick"></a>Partial和Pick</h3><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = {</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = {</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = {</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> {</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: type PartialUser = { id?: number; age?: number; name?: string; }</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialUser</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">User</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于: type PickUser = { id: number; age: number; }</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickUser</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">User</span>, <span class="string">"id"</span> | <span class="string">"age"</span>&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><blockquote><p>动态组件就是让多个组件使用同一个挂载点，并动态切换</p></blockquote><ul><li><p>使用：</p><ul><li><p>setup</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cart</span> <span class="keyword">from</span> <span class="string">'./components/cart.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">'./components/card/index.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> { reactive, markRaw } <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Tabs</span> = {</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">comName</span>: <span class="built_in">any</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Com</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Tabs</span>, <span class="string">'comName'</span>&gt;</span><br><span class="line"><span class="comment">//相当于 type Com = {comeName: any}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = reactive&lt;<span class="title class_">Tabs</span>[]&gt;([</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'我是Cart组件'</span>,</span><br><span class="line">    <span class="attr">comName</span>: <span class="title function_">markRaw</span>(<span class="title class_">Cart</span>)</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'我是Card组件'</span>,</span><br><span class="line">    <span class="attr">comName</span>: <span class="title function_">markRaw</span>(<span class="title class_">Card</span>)</span><br><span class="line">  }</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> current = reactive&lt;<span class="title class_">Com</span>&gt;({</span><br><span class="line">  <span class="attr">comName</span>: data[<span class="number">0</span>].<span class="property">comName</span> <span class="comment">//默认是第一个</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeCom</span> = (<span class="params">item: Tabs</span>) =&gt; {</span><br><span class="line">  current.<span class="property">comName</span> = item.<span class="property">comName</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>template</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> </span></span><br><span class="line"><span class="tag">   @<span class="attr">click</span>=<span class="string">"changeCom(item)"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"item in data"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"item.name"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    {{ item.name }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:is</span>=<span class="string">"current.comName"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">title</span>=<span class="string">"这是标题"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">content</span>=<span class="string">"测试测试全局组件"</span></span></span><br><span class="line"><span class="tag"> &gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>:is = “组件名”，也就是默认先展示的哪个组件，由button按钮的点击事件来切换显示的组件名</p></blockquote></li></ul></li><li><p>注意事项：</p><blockquote><ol><li>在Vue2的时候 is 是通过组件名称切换的，在Vue3 setup是通过组件实例切换的</li><li>如果把组件实例放到Reactive，Vue会给出警告，是因为reactive会进行proxy代理，而我们组件代理之后毫无用处，为节省性能开销推荐我们使用shallowRef或者markRaw跳过代理</li></ol></blockquote><p>markRaw实质就是添加了一个<code>__v_skip:true</code>属性，来跳过代理</p></li></ul><h2 id="Transition组件"><a href="#Transition组件" class="headerlink" title="Transition组件"></a>Transition组件</h2><h3 id="Transition生命周期"><a href="#Transition生命周期" class="headerlink" title="Transition生命周期"></a>Transition生命周期</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-enter</span>=<span class="string">"BeforeEnter"</span> //对应<span class="attr">enter-from</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter</span>=<span class="string">"EnterActive"</span>//对应<span class="attr">enter-active</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-enter</span>=<span class="string">"AfterEnter"</span>//对应<span class="attr">enter-to</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter-cancelled</span>=<span class="string">"EnterCancelled"</span>//显示过度打断</span></span><br><span class="line"><span class="tag">  @<span class="attr">before-leave</span>=<span class="string">"BeforeLeave"</span>//对应<span class="attr">leave-from</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave</span>=<span class="string">"LeaveActive"</span>//对应<span class="attr">enter-active</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-leave</span>=<span class="string">"AfterLeave"</span>//对应<span class="attr">leave-to</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave-cancelled</span>=<span class="string">"LeaveCancelled"</span>//离开过度打断</span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> flag = ref&lt;boolean&gt;(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">BeforeEnter</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'进入之前'</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">EnterActive</span> = (<span class="params">el: Element, done: <span class="built_in">Function</span></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'过渡曲线'</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">done</span>();</span></span><br><span class="line"><span class="language-javascript">    }, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">AfterEnter</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'过渡完成'</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">EnterCancelled</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'过渡效果被打断'</span>);</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//...</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>当只用JavaScript过渡的时候，在enter和leave钩子中必须使用done进行回调</p></blockquote><p>结合gsap动画库使用<a href="https://greensock.com/">GreenSock</a>(npm i gsap -S)</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gsap <span class="keyword">from</span> <span class="string">'gsap'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BeforeEnter</span> = (<span class="params">el: Element</span>) =&gt; {</span><br><span class="line">    gsap.<span class="title function_">set</span>(el, {</span><br><span class="line">        <span class="attr">width</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">EnterActive</span> = (<span class="params">el: Element, done: gsap.Callback</span>) =&gt; {</span><br><span class="line">    gsap.<span class="title function_">to</span>(el, {</span><br><span class="line">        <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">onComplete</span>: done</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Transition-group过渡列表"><a href="#Transition-group过渡列表" class="headerlink" title="Transition-group过渡列表"></a>Transition-group过渡列表</h3><blockquote><p>如何同时渲染整个列表，这个场景下我们会使用<code>&lt;transition-group&gt;</code>组件</p></blockquote><p>特点：</p><ul><li>默认情况下，它不会渲染一个包裹元素，但你可以通过tag attribute指定渲染一个元素。</li><li>过渡模式不可用，因为我们不再相互切换特有的元素</li><li>内部元素总是需要提供唯一的key attribute值</li><li>CSS过渡的类将会应用在内部的元素中，而不是这个组/容器本身</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wraps"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span></span></span><br><span class="line"><span class="tag"><span class="attr">enter-active-class</span>=<span class="string">"animate__animated animate__zoomIn"</span></span></span><br><span class="line"><span class="tag"><span class="attr">leave-active-class</span>=<span class="string">"animate__animated animate__rotateOutDownLeft"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>{{ item }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"push"</span>&gt;</span>push<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"pop"</span>&gt;</span>pop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { reactive } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">'animate.css'</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = reactive&lt;number[]&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">push</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    list.<span class="title function_">push</span>(list.<span class="property">length</span> + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">pop</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    list.<span class="title function_">pop</span>()</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>列表的移动过渡</p><blockquote><p><code>&lt;transition-group&gt;</code>组件还有一个特殊之处。除了进入和离开，它还可以为定位的改变添加动画。只需了解新增的v-move类就可以使用这个新功能，它会应用在元素改变定位过程中。像之前的类名一样，它的前缀可以通过name attribute来自定义，也可以通过move-class attribute手动设置</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"random"</span>&gt;</span>random<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">move-class</span>=<span class="string">"move"</span> <span class="attr">tag</span>=<span class="string">"ul"</span> <span class="attr">class</span>=<span class="string">"wraps"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span>{{ item.number }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//npm i lodash,npm i @types/lodash -D</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> list = <span class="title function_">ref</span>(<span class="title class_">Array</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, { <span class="attr">length</span>: <span class="number">81</span> } <span class="keyword">as</span> number[]).<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">id</span>: index,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">number</span>: (index % <span class="number">9</span>) + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}))</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">random</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    list.<span class="property">value</span> = _.<span class="title function_">shuffle</span>(list.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.wraps</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">27px</span> * <span class="number">9</span>);</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.move</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="自动引入插件"><a href="#自动引入插件" class="headerlink" title="自动引入插件"></a>自动引入插件</h2><blockquote><p>npm i -D unplugin-auto-import</p></blockquote><p>vite.config.ts配置</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">'unplugin-auto-import/vite'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title class_">AutoImport</span>({</span><br><span class="line">    <span class="attr">imports</span>: [<span class="string">'vue'</span>],</span><br><span class="line">    <span class="attr">dts</span>: <span class="string">"src/auto-import.d.ts"</span>,</span><br><span class="line">  })]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="TSX"><a href="#TSX" class="headerlink" title="TSX"></a>TSX</h2><blockquote><p>我们之前使用template去写模板，现在可以拓展另一种风格：TSX风格</p><p>vue2 的时候就已经支持jsx写法，只不过不是很友好，随着vue3对TypeScript的支持度，tsx写法越来越被接受</p></blockquote><ol><li><p>安装插件</p><ul><li><p>npm i @vitejs/plugin-vue-jsx -D</p></li><li><p>vite.config.ts配置</p>  <figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineConfig } <span class="keyword">from</span> <span class="string">'vite'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">'@vitejs/plugin-vue-jsx'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>({</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueJsx</span>()]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>修改tsconfig.json配置文件</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"compilerOptions"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      ...</span><br><span class="line"><span class="attr">"jsx"</span><span class="punctuation">:</span> <span class="string">"preserve"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"jsxFactory"</span><span class="punctuation">:</span> <span class="string">"h"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"jsxFragmentFactory"</span><span class="punctuation">:</span> <span class="string">"Fragment"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>配置完成就可以使用了，在目录新建一个xxx.tsx文件</p></li><li><p>使用TSX</p><blockquote><p>tip:tsx不会自动解包，使用ref加.value</p><p>xx.vue组件使用：</p><p><code>import renderDom from './tsx/show';</code>不用加后缀</p><p><code> &lt;renderDom&gt;&lt;/renderDom&gt;</code></p></blockquote><ul><li><p>TSX支持v-model的使用</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> v = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">''</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">{v.value}</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               {v.value}</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li><li><p>v-show</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flag = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeFlag</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    flag.<span class="property">value</span> = !flag.<span class="property">value</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{changeFlag}</span>&gt;</span>changeFlag<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">{flag.value}</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">{!flag.value}</span>&gt;</span>小天<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li><li><p>v-if是不支持的，需要改变风格</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> flag = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            {</span></span><br><span class="line"><span class="language-xml">                flag.value ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : <span class="tag">&lt;<span class="name">div</span>&gt;</span>小天<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            }</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li><li><p>v-for也是不支持的，需要使用Map</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            {</span></span><br><span class="line"><span class="language-xml">              arr.map(v=&gt;{</span></span><br><span class="line"><span class="language-xml">                  return <span class="tag">&lt;<span class="name">div</span>&gt;</span>{v}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              })</span></span><br><span class="line"><span class="language-xml">            }</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li><li><p>v-bind，直接赋值就行</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-arr</span>=<span class="string">{arr}</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li><li><p>v-on绑定事件，所有的事件都按照react风格来</p><ul><li><p>所有事件有on开头</p></li><li><p>所有事件名称首字母大写</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flag = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeFlag</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    flag.<span class="property">value</span> = !flag.<span class="property">value</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{changeFlag}</span>&gt;</span>changeFlag<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">{flag.value}</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">{!flag.value}</span>&gt;</span>小天<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>Props接收值</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = {</span><br><span class="line">    <span class="attr">title</span>:<span class="built_in">string</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params">props:Props</span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>{props.title}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{clickTap}</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickTap</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'click'</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> renderDom</span><br></pre></td></tr></tbody></table></figure></li><li><p>Emit派发</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = {</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderDom</span> = (<span class="params">props: Props,content:<span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>{props.title}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{clickTap.bind(this,content)}</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickTap</span> = (<span class="params">ctx:<span class="built_in">any</span></span>) =&gt; {</span><br><span class="line"> </span><br><span class="line">    ctx.<span class="title function_">emit</span>(<span class="string">'on-click'</span>,<span class="number">1</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><img src="https://pinia.vuejs.org/logo.svg" style="width:200px;height:200px"><blockquote><p>全局状态管理工具</p><p>Pinia.js有如下特点：</p><ul><li>完整的TS的支持</li><li>足够轻量，压缩后的体积只有1kb左右</li><li>去除mutations，只有state，getters，actions；</li><li>actions支持同步和异步</li><li>代码扁平化没有模块嵌套，只有store的概念，store之间可以自由使用，每一个store都是独立的</li><li>无序手动添加store，store一旦创建会自动添加</li><li>支持Vue3和Vue2</li></ul></blockquote><ul><li><p>安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia</span><br><span class="line">yarn add pinia</span><br></pre></td></tr></tbody></table></figure></li><li><p>引入注册Vue3</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> {createPinia} <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="初始化仓库Store"><a href="#初始化仓库Store" class="headerlink" title="初始化仓库Store"></a>初始化仓库Store</h3><ul><li><p>在根目录新建一个store文件夹并新建一个index.ts</p></li><li><p>定义仓库</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Names</span> {</span><br><span class="line">    <span class="variable constant_">TEST</span> = <span class="string">'TEST'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">TEST</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">current</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">"小明"</span>,</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">//类似于computed可以帮助我们去修饰值</span></span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    <span class="comment">//可以操作异步 和 同步提交state</span></span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>组件使用</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"Test.current++"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        pinia: {{ Test.current }}--{{ Test.name }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTestStore } <span class="keyword">from</span> <span class="string">'../store'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Test</span>); <span class="comment">//Proxy</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="State的修改"><a href="#State的修改" class="headerlink" title="State的修改"></a>State的修改</h3><ul><li><p>直接修改</p></li><li><p>批量修改State的值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        pinia: {{ Test.current }}--{{ Test.name }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTestStore } <span class="keyword">from</span> <span class="string">'../store'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Test</span>.$patch({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">current</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">'pinia'</span></span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>批量修改（函数形式）</p><blockquote><p>推荐，可以自定义修改逻辑</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        pinia: {{ Test.current }}--{{ Test.name }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTestStore } <span class="keyword">from</span> <span class="string">'../store'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Test</span>.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">        state.<span class="property">current</span> = <span class="number">200</span>;</span></span><br><span class="line"><span class="language-javascript">        state.<span class="property">name</span> = <span class="string">'pinia'</span>;</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>通过原始对象修改整个实例</p><blockquote><p>$state可以通过将store的属性设置为新对象来替换store的整个状态，缺点就是必须修改整个对象的所有属性</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        pinia: {{ Test.current }}--{{ Test.name }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTestStore } <span class="keyword">from</span> <span class="string">'../store'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Test</span>.<span class="property">$state</span> = {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">current</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">'pinia'</span></span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>通过actions修改</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Names</span> {</span><br><span class="line">    <span class="variable constant_">TEST</span> = <span class="string">'TEST'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">TEST</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">current</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">"小明"</span>,</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line">        <span class="title function_">setCurrent</span>(<span class="params">num:<span class="built_in">number</span></span>) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">current</span> = num</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="title class_">Test</span>.<span class="title function_">setCurrent</span>(<span class="number">999</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="解构Store"><a href="#解构Store" class="headerlink" title="解构Store"></a>解构Store</h3><blockquote><p>在Pinia是不允许直接解构，会失去响应式</p><p>需要导入storeToRefs包裹起来</p></blockquote>  <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        pinia: {{ current }}--{{ name }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useTestStore } <span class="keyword">from</span> <span class="string">'../store'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { storeToRefs } <span class="keyword">from</span> <span class="string">'pinia'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title function_">useTestStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> { current, name } = <span class="title function_">storeToRefs</span>(<span class="title class_">Test</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    current.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="actions，getters"><a href="#actions，getters" class="headerlink" title="actions，getters"></a>actions，getters</h3><ul><li><p>actions（支持同步异步）</p><ol><li>直接调用即可</li></ol><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Names</span> {</span><br><span class="line">    <span class="variable constant_">TEST</span> = <span class="string">'TEST'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">TEST</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">current</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">"小明"</span>,</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line">        <span class="title function_">setCurrent</span>(<span class="params">num:<span class="built_in">number</span></span>) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">current</span> = num</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="title class_">Test</span>.<span class="title function_">setCurrent</span>(<span class="number">999</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>异步，可以结合async await修饰</li></ol><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { defineStore } <span class="keyword">from</span> <span class="string">"pinia"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Names</span> {</span><br><span class="line">    <span class="variable constant_">TEST</span> = <span class="string">'TEST'</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = {</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">current</span>: <span class="built_in">number</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = (): <span class="title class_">Promise</span>&lt;<span class="title class_">Result</span>&gt; =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="title function_">resolve</span>({</span><br><span class="line">                <span class="attr">name</span>: <span class="string">'小柚'</span>,</span><br><span class="line">                <span class="attr">current</span>: <span class="number">18</span></span><br><span class="line">            })</span><br><span class="line">        }, <span class="number">3000</span>)</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="title class_">Names</span>.<span class="property">TEST</span>, {</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">name</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="attr">current</span>: <span class="number">1</span>,</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">getters</span>: {</span><br><span class="line"></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">actions</span>: {</span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">setCurrent</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title class_">User</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = result.<span class="property">name</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">current</span> = result.<span class="property">current</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>多个action互相调用</li></ol><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: {</span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">setCurrent</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title class_">User</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = result.<span class="property">name</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">current</span> = result.<span class="property">current</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">changeAge</span>() <span class="comment">//相互调用</span></span><br><span class="line">        },</span><br><span class="line">        <span class="title function_">changeAge</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li><li><p>getters</p><blockquote><p>主要作用类似于computed数据修饰并且有缓存</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: {</span><br><span class="line">    <span class="title function_">newName</span>(): <span class="built_in">string</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`$-<span class="subst">${<span class="variable language_">this</span>.name}</span>`</span></span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>然后在模板中直接使用</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        getters:{{ Test.newName }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ol><li><p>$reset</p><blockquote><p>重置store到他的初始状态</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="title class_">Test</span>.$reset()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>初始状态的数据是：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">state</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">       <span class="keyword">return</span> {</span><br><span class="line">           <span class="attr">name</span>: <span class="string">"小明"</span>,</span><br><span class="line">           <span class="attr">current</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">       }</span><br><span class="line">   },</span><br></pre></td></tr></tbody></table></figure></li><li><p>订阅state的改变</p><blockquote><p>类似于Vuex的abscribe，只要有state的变化就会走这个函数</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$subscribe(<span class="function">(<span class="params">args,state</span>)=&gt;</span>{</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args,state);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>第二个参数：如果你的组件卸载之后还想继续调用请设置第二个参数</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$subscribe(<span class="function">(<span class="params">args,state</span>)=&gt;</span>{</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args,state); </span><br><span class="line">},{</span><br><span class="line">  <span class="attr">detached</span>:<span class="literal">true</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>订阅actions的调用</p><blockquote><p>只要actions被调用就会走这个函数</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Test</span>.$onAction(<span class="function">(<span class="params">args</span>)=&gt;</span>{</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="pinia持久化插件"><a href="#pinia持久化插件" class="headerlink" title="pinia持久化插件"></a>pinia持久化插件</h3><blockquote><p>页面每次刷新都会丢失状态</p><p>需要写一个pinia插件去缓存值到localStorage </p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp, toRaw } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">'./components/card/index.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> { createPinia, <span class="title class_">PiniaPluginContext</span> } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __piniaKey__ = <span class="string">'__piniaKey__'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setStorage</span> = (<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStorage</span> = (<span class="params">key: <span class="built_in">string</span></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="keyword">as</span> <span class="built_in">string</span>) : {}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义持久化插件，接收用户传的参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">piniaPlugin</span> = (<span class="params">context: PiniaPluginContext</span>) =&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用这个PiniaPluginContext来解构出store</span></span><br><span class="line">    <span class="keyword">const</span> { store } = context;</span><br><span class="line">    <span class="comment">//从localStorage中获取存储的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里如果你的仓库有2个以上，那么data就会有两份以上，所以都会持久化的</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">getStorage</span>(<span class="string">`<span class="subst">${__piniaKey__}</span>-<span class="subst">${store.$id}</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听store的变化,并且把变化的值存到localStorage中</span></span><br><span class="line">    store.$subscribe(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">//将这个store存到localStorage中，但这是proxy对象，需要转换成普通对象</span></span><br><span class="line">        <span class="title function_">setStorage</span>(<span class="string">`<span class="subst">${__piniaKey__}</span>-<span class="subst">${store.$id}</span>`</span>, <span class="title function_">toRaw</span>(store.<span class="property">$state</span>))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">//返还接收到的这个对象</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//那么这里就可以使用接收到的data了</span></span><br><span class="line">store.<span class="title function_">use</span>(piniaPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">'Card'</span>, <span class="title class_">Card</span>)</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><p>如果需要接收用户传的参数，可以这样</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp, toRaw } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Card</span> <span class="keyword">from</span> <span class="string">'./components/card/index.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> { createPinia, <span class="title class_">PiniaPluginContext</span> } <span class="keyword">from</span> <span class="string">'pinia'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Optioins</span> = {</span><br><span class="line">    key?: <span class="built_in">string</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __piniaKey__ = <span class="string">'__piniaKey__'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setStorage</span> = (<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">any</span></span>) =&gt; {</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value))</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStorage</span> = (<span class="params">key: <span class="built_in">string</span></span>) =&gt; {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key) <span class="keyword">as</span> <span class="built_in">string</span>) : {}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义持久化插件，接收用户传的参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">piniaPlugin</span> = (<span class="params">options: Optioins</span>) =&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用这个PiniaPluginContext来解构出store</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">context: PiniaPluginContext</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> { store } = context;</span><br><span class="line">        <span class="comment">//从localStorage中获取存储的数据</span></span><br><span class="line">        <span class="keyword">const</span> data = <span class="title function_">getStorage</span>(<span class="string">`<span class="subst">${options?.key ?? __piniaKey__}</span>-<span class="subst">${store.$id}</span>`</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听store的变化,并且把变化的值存到localStorage中</span></span><br><span class="line">        store.$subscribe(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="comment">//将这个store存到localStorage中，但这是proxy对象，需要转换成普通对象</span></span><br><span class="line">            <span class="title function_">setStorage</span>(<span class="string">`<span class="subst">${options?.key ?? __piniaKey__}</span>-<span class="subst">${store.$id}</span>`</span>, <span class="title function_">toRaw</span>(store.<span class="property">$state</span>))</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">//返还接收到的这个对象</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//那么这里就可以使用接收到的data了</span></span><br><span class="line">store.<span class="title function_">use</span>(<span class="title function_">piniaPlugin</span>({}))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">'Card'</span>, <span class="title class_">Card</span>)</span><br><span class="line">app.<span class="title function_">use</span>(store)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="Vue-Router4"><a href="#Vue-Router4" class="headerlink" title="Vue-Router4"></a>Vue-Router4</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><ul><li><p>安装：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@<span class="number">4</span>   <span class="comment">//vue3，vue2需要用3版本</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>初始化</p><blockquote><p>在src目录下新建一个router文件夹，并新建index.ts</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入路由对象</span></span><br><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory, createWebHashHistory, createMemoryHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//vue2是 mode: history | vue3是 history:createWebHistory</span></span><br><span class="line"><span class="comment">//vue2是 mode: hash    | vue3是 history:createWebHashHistory</span></span><br><span class="line"><span class="comment">//vue2是 mode: abstact | vue3是 history:createMemoryHistory</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//路由数组的类型 RouteRecordRaw</span></span><br><span class="line"><span class="comment">// 定义一些路由</span></span><br><span class="line"><span class="comment">// 每个路由都需要映射到一个组件。</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//默认</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">"/"</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/Pinia.vue'</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">"/cart"</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/cart.vue'</span>)</span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//导出router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure></li><li><p>在main.ts挂载</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApp } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>在组件中使用</p><blockquote><p>这里与vue2用法一致</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Router<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Pinia<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/cart"</span>&gt;</span>Cart<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">a</span> {</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><ul><li><p>字符串模式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Router<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;router-link to="/"&gt;Pinia&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">  &lt;router-link to="/cart"&gt;Cart&lt;/router-link&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toPage('/')"</span>&gt;</span>Pinia<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toPage('/cart')"</span> <span class="attr">style</span>=<span class="string">"margin-left: 10px;"</span>&gt;</span>Cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//使用官方的hock</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toPage</span> = (<span class="params">url: string</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">  router.<span class="title function_">push</span>(url)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>对象模式</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用官方的hock</span></span><br><span class="line"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toPage</span> = (<span class="params">url: <span class="built_in">string</span></span>) =&gt; {</span><br><span class="line">  router.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">path</span>: url</span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>命名式路由模式</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用官方的hock</span></span><br><span class="line"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toPage</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  router.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'cart'</span></span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>a标签跳转</p><blockquote><p>直接通过a href也可以跳转，但是会刷新页面</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h3><ul><li><p>replace的使用</p><blockquote><p>采用replace进行页面的跳转同样也会渲染新的Vue组件，但是在history中不会重复保存记录，而是替换原有的vue组件；</p></blockquote><ul><li><p>router-link使用方法</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">replace</span> <span class="attr">to</span>=<span class="string">"/cart"</span>&gt;</span>Cart<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>编程式导航</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用官方的hock</span></span><br><span class="line"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toPage</span> = (<span class="params">url: <span class="built_in">string</span></span>) =&gt; {</span><br><span class="line">  router.<span class="title function_">replace</span>(url)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>前进-后退</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"next"</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"prev"</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="comment">//前进 数量不限于1</span></span><br><span class="line">  router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">prev</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="comment">//后退</span></span><br><span class="line">  router.<span class="title function_">back</span>()</span><br><span class="line">  <span class="comment">//router.go(-1)</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><blockquote><p>首先是下面代码所用到的数据：</p></blockquote><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"data"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"小明"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"小红"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"id"</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"小黑"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"age"</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>query路由传参</p><blockquote><p>编程式路由导航，使用router push 或者 replace的时候，改为对象形式新增query，必须传入一个对象</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">"ts"</span>&gt;</span><br><span class="line"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> { data } <span class="keyword">from</span> <span class="string">'../data/testList.json'</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">type</span> item = {</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params">item: item</span>) =&gt; {</span><br><span class="line">    router.<span class="title function_">push</span>({</span><br><span class="line">        <span class="comment">//这里也可以是name</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/detail'</span>,</span><br><span class="line">        <span class="attr">query</span>: item</span><br><span class="line">    })</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><ul><li><p>接收参数，使用useRoute的query</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"router.back()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是详情页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：{{ route.query.name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ route.query.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter, useRoute } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>此时地址栏：</p><ul><li><code>http://localhost:3000/detail?id=1&amp;name=小明&amp;age=20</code></li></ul></li></ul></li><li><p>params路由传参</p><blockquote><p>编程式导航，使用router.push或者replace的时候改为对象形式，并且只能使用name，path无效，然后传入params</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params">item: item</span>) =&gt; {</span><br><span class="line">    router.<span class="title function_">push</span>({</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'detail'</span>,</span><br><span class="line">        <span class="attr">params</span>: item</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>接收参数，使用useRoute的params</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"router.back()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是详情页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：{{ route.params.name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ route.params.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter, useRoute } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>此时地址栏：</p><ul><li><code>http://localhost:3000/detail</code></li><li>刷新会丢失数据</li></ul></li></ul></li><li><p>动态路由传参</p><blockquote><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件进行渲染，在Vue Router中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数</p></blockquote><p style="color:red;font-weight:600;">路径参数用冒号 : 表示。当一个路由被匹配时，它的params的值将在每个组件</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">"/"</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/Table.vue'</span>)</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//动态路由参数</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">"/detail/:id"</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">'detail'</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/Detail.vue'</span>)</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { data } <span class="keyword">from</span> <span class="string">'../data/testList.json'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript">type item = {</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: number,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: number</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params">item: item</span>) =&gt; {</span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">'detail'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">params</span>: {</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//这里对应上动态路由的参数id，地址栏会响应改变</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">id</span>: item.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>此时地址栏：<ul><li><code>http://localhost:3000/detail/1</code></li></ul></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"router.back()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是详情页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>ID：{{ route.params.id }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：{{ person.name }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：{{ person.age }}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { data } <span class="keyword">from</span> <span class="string">'../data/testList.json'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> { useRouter, useRoute } <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数组的find方法会返回找到的对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> person = data.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === <span class="title class_">Number</span>(route.<span class="property">params</span>.<span class="property">id</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><blockquote><p>​    命名视图可以在同一级（同一个组件）中展示更多的路由视图，而不是嵌套显示。 命名视图可以让一个组件中具有多个路由渲染出口，这对于一些特定的布局组件非常有用。 命名视图的概念非常类似于“具名插槽”，并且视图的默认名称也是 default。</p><p>​    一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> } <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">"/"</span>,</span><br><span class="line">        <span class="attr">components</span>: {</span><br><span class="line">            <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/layout/menu.vue'</span>),</span><br><span class="line">            <span class="attr">header</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/layout/header.vue'</span>),</span><br><span class="line">            <span class="attr">content</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/layout/content.vue'</span>),</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>({</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">})</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure><p>对应Router-view通过name对应组件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="重定向，别名"><a href="#重定向，别名" class="headerlink" title="重定向，别名"></a>重定向，别名</h3><ul><li><p>重定向：redirect</p><ul><li><p>字符串形式配置，访问 / 重定向到 /user1</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    {</span><br><span class="line">        <span class="attr">path</span>:<span class="string">'/'</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/root.vue'</span>),</span><br><span class="line">        <span class="attr">redirect</span>:<span class="string">'/user1'</span>,</span><br><span class="line">        <span class="attr">children</span>:[</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>:<span class="string">'/user1'</span>,</span><br><span class="line">                <span class="attr">components</span>:{</span><br><span class="line">                    <span class="attr">default</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/A.vue'</span>)</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>:<span class="string">'/user2'</span>,</span><br><span class="line">                <span class="attr">components</span>:{</span><br><span class="line">                    <span class="attr">bbb</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/B.vue'</span>),</span><br><span class="line">                    <span class="attr">ccc</span>:<span class="function">()=&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/C.vue'</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li><li><p>对象形式配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redirect</span>: { <span class="attr">path</span>: <span class="string">'/user1'</span> },</span><br></pre></td></tr></tbody></table></figure></li><li><p>函数模式（可以传参）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">path</span>: <span class="string">'/user1'</span>,</span><br><span class="line">        <span class="attr">query</span>: to.<span class="property">query</span></span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>别名：alias</p><ul><li><p>将 / 别名为 /root，意味着当用户访问 /root时，和访问 / 的资源是一样的</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>: <span class="string">'/'</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">'../components/root.vue'</span>),</span><br><span class="line"><span class="attr">alias</span>:[<span class="string">"/root"</span>,<span class="string">"/root2"</span>,<span class="string">"/root3"</span>],</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><ul><li><p>全局前置守卫</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to,form,next)=&gt;{</span><br><span class="line">console.log(to,form);</span><br><span class="line">next()</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p>to:   即将要进入的路由对象；<br>from:  当前导航正要离开的路由对象；<br>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。<br>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。<br>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p></blockquote><ul><li><p>例：权限判断</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> whileList = [<span class="string">'/'</span>]</span><br><span class="line"> </span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">'token'</span>)</span><br><span class="line">    <span class="comment">//白名单 有值 或者登陆过存储了token信息可以跳转 否则就去登录页面</span></span><br><span class="line">    <span class="keyword">if</span> (whileList.<span class="title function_">includes</span>(to.<span class="property">path</span>) || token) {</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="title function_">next</span>({</span><br><span class="line">            <span class="attr">path</span>:<span class="string">'/'</span></span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> Vue3.0 </tag>
            
            <tag> Pinia </tag>
            
            <tag> vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习</title>
      <link href="/undefined/25526.html"/>
      <url>/undefined/25526.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript是什么？"><a href="#TypeScript是什么？" class="headerlink" title="TypeScript是什么？"></a>TypeScript是什么？</h1><img src="../imgs/ts/初识ts.png"><p>增加了：</p><img src="../imgs/ts/ts新增.png"><hr><h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol><li>下载安装Node.js</li><li>使用npm全局安装typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li>创建一个ts文件</li><li>使用tsc对文件进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul><li><p>类型声明：</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型,参数: 类型</span>): 类型{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行时，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值同时进行时，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center">类型</th><th align="center">例子</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1,-33,2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">“helo”,’hi’,模板字符串</td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true,false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’小明’}</td><td align="center">任意js对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A,B}</td><td align="center">枚举</td></tr></tbody></table></li><li><p>number</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>:<span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>:<span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>:<span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>:<span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>boolean</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>:<span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>string</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>:<span class="built_in">string</span> = <span class="string">'blue'</span></span><br><span class="line">color = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>:<span class="built_in">string</span> = <span class="string">'Bob Bobbington'</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>:<span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>:<span class="built_in">string</span> = <span class="string">`Hello,my name is <span class="subst">${fullName}</span></span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字面量</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>:<span class="string">'red'</span> | <span class="string">'blue'</span> | <span class="string">'black'</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>any</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>:<span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">'hello'</span></span><br><span class="line">d = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>unknown</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>:<span class="built_in">unknown</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">'hello'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>never</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message:<span class="built_in">string</span></span>): <span class="built_in">never</span>{</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>object</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:<span class="built_in">object</span> = {};</span><br></pre></td></tr></tbody></table></figure></li><li><p>array</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>tuple</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:[<span class="built_in">string</span>,<span class="built_in">number</span>]</span><br><span class="line">x = [<span class="string">'hello'</span>,<span class="number">18</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>enum</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> {</span><br><span class="line"><span class="title class_">Red</span>,</span><br><span class="line"><span class="title class_">Green</span>,</span><br><span class="line"><span class="title class_">Blue</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span>{</span><br><span class="line"><span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line"><span class="title class_">Green</span>,</span><br><span class="line"><span class="title class_">Blue</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span>{</span><br><span class="line"><span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line"><span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line"><span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>; </span><br></pre></td></tr></tbody></table></figure></li><li><p>第二种：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">'this is a string'</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>:<span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul></li><li><p>语法：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//{} 用来指定对象中可以包含哪些属性</span></span><br><span class="line"><span class="comment">// 语法：{属性名:属性值,属性名:属性值}</span></span><br><span class="line"><span class="comment">// 在属性名后边加上?，表示属性是可选的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:{<span class="attr">name</span>:<span class="built_in">string</span>,age?:<span class="built_in">number</span>};</span><br><span class="line">b = {<span class="attr">name</span>:<span class="string">'小明'</span>,<span class="attr">age</span>:<span class="number">18</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> b={</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    age?:<span class="built_in">number</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>:b = {<span class="attr">name</span>:<span class="string">'小明'</span>}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="3、编译选项"><a href="#3、编译选项" class="headerlink" title="3、编译选项"></a>3、编译选项</h2><ul><li><p>创建tsconfig.json</p><blockquote><p>使用 tsc -init自动构建，也可手动创建，每次tsc默认编译整个项目</p><p>编译指令：tsc   |   实时监听变化：tsc -w</p></blockquote><ul><li><p>配置选项：</p><ul><li><p>include</p><ul><li><p>定义希望被编译文件所在的目录</p></li><li><p>默认值：<code>["**/*"]</code> <code>//**表示所有目录，*表示所有文件</code></p></li><li><p>示例：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"include"</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">"./src/**/*"</span><span class="punctuation">,</span><span class="string">"./tests/**/*"</span><span class="punctuation">]</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p></li></ul></li><li><p>exclude</p><ul><li>定义需要排除在外的目录</li><li>与include对立</li></ul></li><li><p>compilerOptions</p><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项（常用）</p><ul><li><p>target</p><blockquote><p>设置ts代码编译的目标版本</p><p>可选：ES3、ES5、ES6/ES2015、ES7/ES2016、ES2018、ES2019、ES2020、ESNext</p></blockquote></li><li><p>module</p><blockquote><p>设置编译后代码使用的模块化系统</p><p>可选：CommonJS、UMD、AMD、System、ES2020、ESNext、None</p></blockquote></li><li><p>outDir</p><blockquote><p>编译后文件的所在目录</p><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></blockquote></li><li><p>removeComments</p><blockquote><p>是否在编译过程中删除文件中的注释</p></blockquote></li><li><p>strict</p><blockquote><p>严格模式</p></blockquote></li><li><p>allowJS</p><blockquote><p>是否对js文件进行编译</p></blockquote></li><li><p>noEmitOnError</p><blockquote><p>有错误不能编译</p></blockquote></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><blockquote><p>面向对象简而言之就是程序之中所有的操作都需要通过对象来完成</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>在程序中所有的对象都被分成了两个部分，数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为<strong>属性</strong>，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p></blockquote><hr><h2 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h2><blockquote><p>​    要想面向对象、操作对象，首先要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象。不同的类可以用来创建不同的对象。</p></blockquote><hr><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用class关键字来定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 直接定义的属性是实例属性，需要通过对象的实例去访问：</span></span><br><span class="line"><span class="comment">    *       const per = new Person();</span></span><br><span class="line"><span class="comment">    *       per.name</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 使用static开头的属性是静态属性（类属性），只可以直接通过类访问</span></span><br><span class="line"><span class="comment">    *       Person.age</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * readonly开头的属性表示只读的属性</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义实例属性</span></span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">'小明'</span>;</span><br><span class="line">    <span class="comment">//在属性之前使用static关键字可以定义类属性（静态属性）</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="attr">sex</span>: <span class="built_in">string</span> = <span class="string">'男'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   如果方法以static开头，则方法就是类方法，可以直接通过类去调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">     <span class="keyword">static</span> <span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'大家好！'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">per.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line"><span class="comment">// per.name = '小柚'; //ts检查会报错提示属性是只读的不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per); <span class="comment">//此时由于sex属性是静态属性（类属性），所以per里没有</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">sex</span>);</span><br><span class="line"><span class="comment">// per.sayHello(); //per没有该方法，因为static成了类方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></tbody></table></figure><ul><li><p>运行结果：</p><img src="../imgs/ts/类打印.png"></li></ul><h2 id="2、构造函数"><a href="#2、构造函数" class="headerlink" title="2、构造函数"></a>2、构造函数</h2><blockquote><p>通过学习类之后想一个问题，这个类是不是写死的，那不就跟js对象没啥区别了吗，那怎样才能每次new出来的类数据是自己传的呢？</p></blockquote><hr><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> {</span><br><span class="line">    <span class="comment">//首先声明变量,这俩声明的是this.xxx那个变量</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数会在对象创建的时候调用</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'构造函数执行了----'</span>);</span><br><span class="line">        <span class="comment">//在实例方法中，this就表示当前的实例</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">`<span class="subst">${<span class="variable language_">this</span>.name}</span>：汪汪汪！`</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">'小黑'</span>, <span class="number">3</span>); <span class="comment">//调用constructor</span></span><br><span class="line"><span class="keyword">const</span> dog2 = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">'小白'</span>, <span class="number">4</span>);<span class="comment">//调用constructor</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog2);</span><br><span class="line"></span><br><span class="line">dog1.<span class="title function_">bark</span>(); <span class="comment">//谁调用this就是哪个实例对象</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>运行结果</p><img src="../imgs/ts/构造函数1.png"><img src="../imgs/ts/构造函数2.png"></li></ul><h2 id="3、类的继承"><a href="#3、类的继承" class="headerlink" title="3、类的继承"></a>3、类的继承</h2><blockquote><p>​    学了类的构造以后，再想一个问题，上方构造出了狗的类，那么再构造一个猫呢，或者更多，那不得cv一大把代码很大程度相同的代码，这多恶心，可否将这些类的属性放在一个大的类Animal动物中，然后这些子类来继承呢？</p></blockquote><hr><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"动物在叫~~~~"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  Dog extends Animal</span></span><br><span class="line"><span class="comment">    * - 此时，Animal被称为父类，Dog被称为子类</span></span><br><span class="line"><span class="comment">    * - 使用继承后，子类将会拥有父类所有的方法和属性，想添加新的方法就直接加！</span></span><br><span class="line"><span class="comment">    * - 通过继承可以将多个类中共有的代码写在一个父类中，其实就是一个大类</span></span><br><span class="line"><span class="comment">    * - 如果在子类中添加了和父类相同的方法，则子类方法会覆盖掉父类的方法(方法的重写)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> {</span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${<span class="variable language_">this</span>.name}</span>：汪汪汪！`</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> {</span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${<span class="variable language_">this</span>.name}</span>：喵喵喵！`</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">'旺财'</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">'咪咪'</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line"></span><br><span class="line">dog.<span class="title function_">sayHello</span>();</span><br><span class="line">cat.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></tbody></table></figure><ul><li><p>运行结果：</p><img src="../imgs/ts/类的继承.png"></li></ul><h2 id="4、super关键字"><a href="#4、super关键字" class="headerlink" title="4、super关键字"></a>4、super关键字</h2><blockquote><p>​    这个知识点跟类的继承是相关的，super关键字可以理解成父类，可以用来调用父类的方法、属性，也可以添加父类没有的属性</p></blockquote><hr><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"动物在叫~~~~"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> {</span><br><span class="line">    <span class="comment">//添加父类属性没有的</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 如果在子类写了构造函数，在子类构造函数必须对父类的构造函数进行调用</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="variable language_">super</span>(name); <span class="comment">//调用父类的构造函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line">        <span class="comment">// 在类的方法中 super就表示当前类的父类</span></span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">sayHello</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">'旺财'</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line">dog.<span class="title function_">sayHello</span>() <span class="comment">//输出：动物在叫</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5、抽象类"><a href="#5、抽象类" class="headerlink" title="5、抽象类"></a>5、抽象类</h2><blockquote><p>​    大多时候一个大类只是用作其他子类去继承，并不希望被创建实例对象，这时候需要abstract关键字定义就是抽象类，里面的如果需要声明方法且结构是一样的也可以使用这个关键字去修饰，但是不能有具体的实现，后续继承也必须重写这个方法。</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 以abstract开头的类是抽象类</span></span><br><span class="line"><span class="comment">*   抽象类和其他类区别不大，只是不能用来创建对象</span></span><br><span class="line"><span class="comment">*   抽象类就是专门用来被继承的类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*抽象类可以添加抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> {</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) {</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//定义一个抽象方法，但是后面继承的时候必须要使用这个方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> {</span><br><span class="line"><span class="title function_">sayHello</span>(): <span class="built_in">void</span> {</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">${<span class="variable language_">this</span>.name}</span>：汪汪汪`</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">'旺财'</span>); <span class="comment">//输出： 旺财：汪汪汪</span></span><br><span class="line">dog.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="comment">// const animal = new Animal(); //无法创建抽象类的实例</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6、接口"><a href="#6、接口" class="headerlink" title="6、接口"></a>6、接口</h2><blockquote><p>​    接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>​    接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>​    同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p></blockquote><hr><ul><li><p>描述一个对象的类型（type）</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = {</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//这里用type来限制了对象的类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: myType = {</span><br><span class="line"><span class="attr">name</span>: <span class="string">'小明'</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>用接口同样也可以</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> myInterface {</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//与type的不同点，可以重新声明</span></span><br><span class="line"><span class="keyword">interface</span> myInterface {</span><br><span class="line"><span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj2</span>: myInterface = {</span><br><span class="line"><span class="attr">name</span>: <span class="string">'小明'</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">sex</span>: <span class="string">'男'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义一个类的结构</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 接口可以在定义类的时候去限制类的结构</span></span><br><span class="line"><span class="comment">*   - 接口中所有的属性都不能有实际的值</span></span><br><span class="line"><span class="comment">*   - 接口只定义对象的结构，而不考虑实际值</span></span><br><span class="line"><span class="comment">*       在接口中所有的方法都是抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">interface</span> myInter {</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayhello</span>(): <span class="built_in">void</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 定义类时，可以使类去实现一个接口</span></span><br><span class="line"><span class="comment">*   实现接口就是使类满足接口的要求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span> <span class="keyword">implements</span> myInter {</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) {</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayhello</span>(): <span class="built_in">void</span> {</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'大家好'</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="7、属性的封装"><a href="#7、属性的封装" class="headerlink" title="7、属性的封装"></a>7、属性的封装</h2><blockquote><p>​    在上述创建类的实例中，可以直接对类的属性进行任意修改，非常的不安全，尤其是对于一些敏感数据比如钱。</p></blockquote><hr><ul><li><p>首先看一个实例：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">'小明'</span>, <span class="number">18</span>);</span><br><span class="line">per.<span class="property">name</span> = <span class="string">'小柚'</span>;</span><br><span class="line">per.<span class="property">age</span> = -<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>很明显，这个属性可以直接被修改，并且没有对其作限制，很不友好</p></blockquote></li><li><p>通过关键字封装：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * public 修饰的属性可以在任意位置访问（修改）默认值</span></span><br><span class="line"><span class="comment">        * private 私有属性，私有属性只能在内部进行访问（修改）</span></span><br><span class="line"><span class="comment">        *       - 通过类中添加方法使得私有属性可以被外部访问</span></span><br><span class="line"><span class="comment">        * protected 受保护的属性，只能在当前类和当前子类访问</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_age</span> = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法，用来获取name属性</span></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//定义方法，用来设置name属性</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="params">value: <span class="built_in">string</span></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">getAge</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="title function_">setAge</span>(<span class="params">value: <span class="built_in">number</span></span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_age</span> = value &gt;= <span class="number">0</span> ? value : <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//通过私有属性封装后这里就不能直接进行访问了</span></span><br><span class="line"><span class="comment">// per.name = '小柚';</span></span><br><span class="line"><span class="comment">// per.age = -20;</span></span><br><span class="line">per.<span class="title function_">setName</span>(<span class="string">'小柚'</span>);</span><br><span class="line">per.<span class="title function_">setAge</span>(-<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br></pre></td></tr></tbody></table></figure></li><li><p>至于为什么要加下划线_，在Ts中有设置getter和setter的方法，不能重复变量</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将上方的getName可以替换成下方...</span></span><br><span class="line"><span class="comment">//TS中设置getter方法的方式</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>(): <span class="built_in">string</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value: <span class="built_in">string</span></span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">age</span>(): <span class="built_in">number</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value: <span class="built_in">number</span></span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> = value &gt;= <span class="number">0</span> ? value : <span class="number">999</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//然后就可以这样，是调用了set的name()和age()方法</span></span><br><span class="line"><span class="comment">//并不是那个_name，而且per上并没有变量，因为是private修饰的私有属性</span></span><br><span class="line">per.<span class="property">name</span> = <span class="string">'小柚'</span>;</span><br><span class="line">per.<span class="property">age</span> = -<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br></pre></td></tr></tbody></table></figure></li><li><p>对于protected属性还是跟继承有关，保护特性介于public和private之间</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> {</span><br><span class="line"><span class="keyword">protected</span> <span class="attr">num</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">num: <span class="built_in">number</span></span>) {</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">num</span> = num</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> {</span><br><span class="line"><span class="title function_">test</span>(<span class="params"></span>) {</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>); <span class="comment">//可以访问父类的num属性</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">123</span>);</span><br><span class="line">b.<span class="title function_">test</span>() <span class="comment">//123</span></span><br><span class="line"><span class="comment">// console.log(b.num) //这里就访问不了勒</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>然后普及一下：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> {</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>,age:<span class="built_in">number</span></span>) {</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//两者效果一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> {</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) { }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>(<span class="string">'小明'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="8、泛型"><a href="#8、泛型" class="headerlink" title="8、泛型"></a>8、泛型</h2><blockquote><p>在定义函数或是类时，如果遇到类型不明确就可以使用泛型</p></blockquote><ul><li><p>函数：</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;K&gt;(<span class="attr">a</span>: K): <span class="built_in">void</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (a) === <span class="string">'number'</span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接调用具有泛型的函数</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">9</span>); <span class="comment">//不指定泛型，TS可以自动对类型进行推断</span></span><br><span class="line">fn&lt;<span class="built_in">number</span>&gt;(<span class="number">9</span>) <span class="comment">//指定泛型</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>类</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span>&lt;T&gt;{</span><br><span class="line">    <span class="attr">name</span>: T;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: T</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> <span class="title class_">Myclass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">'小明'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mc);</span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0学习</title>
      <link href="/undefined/46905.html"/>
      <url>/undefined/46905.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 Composition API</h1><h2 id="1-setup"><a href="#1-setup" class="headerlink" title="1. setup"></a>1. setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数</li><li>setup是所有<font color="red">Composition API（组合API）</font><i style="color:gray;font-weight:bold">表演的舞台”</i></li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法，在模板中均可以使用</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methods、computed…）中可以访问到setup中的属性、方法。</li><li>但在setup中不能访问到Vue2.x配置</li><li>如有重名，setup优先</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性。</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2. ref函数"></a>2. ref函数</h2><ul><li>作用：定义一个响应式的数据</li><li>语法：<code>let xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的<span style="color:red">引用对象（referece对象，简称ref对象）</span></li><li>JS中操作数据：<code>xxx.value</code></li><li>模板中读取数据：不需要.value，直接<code>&lt;div&gt;{{xxx}}&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的get与set完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“求助‘</i> 了Vue3.0中的一个新函数——<code>reactive</code>函数</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3. reactive函数"></a>3. reactive函数</h2><ul><li><p>作用：定义一个对象或数组类型的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</p></li><li><p>语法：<code>const 代理对象 = reactive(源对象)</code>接收一个对象（或数组），返回一个<span style="color:red">Proxy的实例对象</span></p></li><li><p>reactive定义的响应式数据是“深层次的”</p></li><li><p>内部基于ES6的Proxy实现，通过代理对象操作源对象内部数据进行操作。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>){</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>({</span><br><span class="line">        <span class="attr">name</span>:<span class="string">'张三'</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="attr">job</span>:{</span><br><span class="line">            <span class="attr">type</span>:<span class="string">'前端工程师'</span>,</span><br><span class="line">            <span class="attr">salary</span>:<span class="string">'10K'</span>,</span><br><span class="line">            <span class="attr">a</span>:{</span><br><span class="line">                <span class="attr">b</span>:{</span><br><span class="line">                    <span class="attr">c</span>:<span class="number">666</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">hobby</span>:[<span class="string">'学习'</span>,<span class="string">'打游戏'</span>,<span class="string">'干饭'</span>]</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params"></span>){</span><br><span class="line">        person.<span class="property">name</span> = <span class="string">'李四'</span></span><br><span class="line">        person.<span class="property">job</span>.<span class="property">salary</span> = <span class="string">'15K'</span></span><br><span class="line">        person.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span> = <span class="number">999</span></span><br><span class="line">        hobby[<span class="number">1</span>] = <span class="string">'睡觉'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>{</span><br><span class="line">        person,</span><br><span class="line">        changeInfo</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4. Vue3.0中的响应式原理"></a>4. Vue3.0中的响应式原理</h2><h3 id="Vue2-x的响应式"><a href="#Vue2-x的响应式" class="headerlink" title="Vue2.x的响应式"></a>Vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取，修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data,<span class="string">'count'</span>,{</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>){},</span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>){}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性，界面不会更新（Vue通过Vue.set()、Vue.delete()方法解决）</li><li>直接通过下标修改数组，界面不会自动更新</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>通过Proxy（代理）：拦截对象中任意属性的变化，包括属性值的读写、属性的添加、修改、删除等。</p></li><li><p>通过Reflect（反射）：对源对象的属性进行操作。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'张三'</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟Vue3中实现响应式</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person,{</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,propName</span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人读取了p身上的<span class="subst">${propName}</span>属性`</span>)</span><br><span class="line">        <span class="comment">//return target[propName]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName)</span><br><span class="line">    },</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propName,value</span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人修改了p身上的<span class="subst">${propName}</span>属性，我要去更新页面了`</span>)</span><br><span class="line">        <span class="comment">//return target[propName] = value</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value)</span><br><span class="line">    },</span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`有人删除了p身上的<span class="subst">${propName}</span>属性，我要去更新页面了`</span>)</span><br><span class="line">        <span class="comment">//return delete target[propName]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,propName)</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是<code>undefined</code></li></ul></li><li>setup的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs：值为对象，包含：组件外部传递过来，但没有在props配置中声明的参数</li><li>slots：收到的插槽内容，相当于<code>this.$slots</code></li><li>emit：分发自定义事件的函数，相当于<code>this.$emit</code></li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7. 计算属性与监视"></a>7. 计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1. computed函数"></a>1. computed函数</h3><ul><li><p>与Vue中的computed配置功能一致</p></li><li><p>写法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {computed} <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>){</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">'-'</span> + person.<span class="property">lastName</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>({</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>){</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">'-'</span> + person.<span class="property">lastName</span></span><br><span class="line">        },</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>){</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">'-'</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2. watch函数"></a>2. watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式时：oldValue无法正确获取、强制开启了深度监视</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { reactive, ref, watch } <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">"你好"</span>);</span><br><span class="line">    <span class="keyword">let</span> person = <span class="title function_">reactive</span>({</span><br><span class="line">      <span class="attr">name</span>: <span class="string">"张三"</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">job</span>: {</span><br><span class="line">        <span class="attr">a</span>: {</span><br><span class="line">          <span class="attr">salary</span>: <span class="number">20</span>,</span><br><span class="line">        },</span><br><span class="line">      },</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      sum,<span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"sum变了"</span>, newValue, oldValue);</span><br><span class="line">      },</span><br><span class="line">      { <span class="attr">immediate</span>: <span class="literal">false</span> }</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      [sum, msg],</span><br><span class="line">      <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"sum或msg变了"</span>, newValue, oldValue);</span><br><span class="line">      },</span><br><span class="line">      { <span class="attr">immediate</span>: <span class="literal">false</span> }</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况三：监视reactive定义的响应式数据(整个对象)</span></span><br><span class="line">    <span class="comment">//oldValue有bug</span></span><br><span class="line">    <span class="title function_">watch</span>(person, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"person某个属性变了"</span>, newValue, oldValue);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> person.<span class="property">age</span>,</span><br><span class="line">      <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"person的age属性变了"</span>, newValue, oldValue);</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">    <span class="title function_">watch</span>([<span class="function">() =&gt;</span> person.<span class="property">name</span>, <span class="function">() =&gt;</span> person.<span class="property">age</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"person部分信息变了"</span>, newValue, oldValue);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况六：监视reactive定义的响应式数据中的对象，需开启深度</span></span><br><span class="line">    <span class="comment">// oldValue有bug</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> person.<span class="property">job</span>,</span><br><span class="line">      <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"涨薪了"</span>, newValue, oldValue);</span><br><span class="line">      },</span><br><span class="line">      { <span class="attr">deep</span>: <span class="literal">true</span> }</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      sum,</span><br><span class="line">      person,</span><br><span class="line">      msg,</span><br><span class="line">    };</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3. watchEffect函数"></a>3. watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个就监视哪个属性</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的是计算出来的值（回调函数的返回值），所以必须要写返回值</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调用到的数据只要发送变化，则直接重新执行回调</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'watchEffect配置的回调执行了'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>清除副作用</p><blockquote><p>就是在触发监听之前会调用一个函数可以处理你的逻辑如防抖</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { watchEffect, ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">let</span> message = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">''</span>)</span><br><span class="line"> <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">oninvalidate</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//console.log('message', message.value);</span></span><br><span class="line">    <span class="title function_">oninvalidate</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">        </span><br><span class="line">    })</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'message'</span>, message.<span class="property">value</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>更多的配置项</p><table><thead><tr><th></th><th>pre</th><th>sync</th><th>post</th></tr></thead><tbody><tr><td>更新时机</td><td>组件更新前执行</td><td>强制效果始终同步触发</td><td>组件更新后执行</td></tr></tbody></table><blockquote><p>副作用刷新时机flush一般使用post</p></blockquote><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { watchEffect, ref } <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">let</span> message = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">let</span> message2 = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">''</span>)</span><br><span class="line"> <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">oninvalidate</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">//console.log('message', message.value);</span></span><br><span class="line">    <span class="title function_">oninvalidate</span>(<span class="function">()=&gt;</span>{</span><br><span class="line"> </span><br><span class="line">    })</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'message2'</span>, message2.<span class="property">value</span>);</span><br><span class="line">},{</span><br><span class="line">    <span class="attr">flush</span>:<span class="string">"post"</span>,</span><br><span class="line">    onTrigger () {</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8. 生命周期"></a>8. 生命周期</h2><p><img src="https://cn.vuejs.org/images/lifecycle.png" style="width:50%"><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" style="width:50%"></p><ul><li><p>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：</p><ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li><p>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：</p><blockquote><p><strong>(没有对应的API放入setup，setup就相当于beforeCreate和created)</strong></p></blockquote><ul><li><code>beforeCreate</code>===&gt;<code>setup()</code> </li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code>&nbsp;==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hock函数"><a href="#9-自定义hock函数" class="headerlink" title="9. 自定义hock函数"></a>9. 自定义hock函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10. toRef"></a>10. toRef</h2><ul><li>作用：创建一个ref对象，其value值指向另一个对象中的某个属性</li><li>语法：<code>const name = toRef(person,'name')</code></li><li>应用：要将响应式对象中的某个属性单独提供给外部使用时</li><li>拓展：<code>toRefs</code>与<code>toRef</code>功能一致，但可以批量创建多个ref对象，语法：<code>toRefs(person)</code></li></ul><h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"keyword"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>{{keyword}}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> {ref,customRef} <span class="keyword">from</span> <span class="string">'vue'</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">'Demo'</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">setup</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let keyword = ref('hello') //使用Vue准备好的内置ref</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//自定义一个myRef</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myRef</span>(<span class="params">value,delay</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> timer</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//通过customRef去实现自定义</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>{</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>{</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">get</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">track</span>() <span class="comment">//告诉Vue这个value值是需要被“追踪”的</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> value</span></span><br><span class="line"><span class="language-javascript">},</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">set</span>(<span class="params">newValue</span>){</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span></span><br><span class="line"><span class="language-javascript">value = newValue</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">trigger</span>() <span class="comment">//告诉Vue去更新界面</span></span></span><br><span class="line"><span class="language-javascript">},delay)</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript">})</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> keyword = <span class="title function_">myRef</span>(<span class="string">'hello'</span>,<span class="number">500</span>) <span class="comment">//使用程序员自定义的ref</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> {</span></span><br><span class="line"><span class="language-javascript">keyword</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript">}</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px"><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>){</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>({<span class="attr">name</span>:<span class="string">'奔驰'</span>,<span class="attr">price</span>:<span class="string">'40万'</span>})</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">'car'</span>,car)</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>){</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">'car'</span>)</span><br><span class="line">    <span class="keyword">return</span> {car}</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="width:60%;"> <h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" style="height:360px"><h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"移动位置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isShow = false"</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> {defineAsyncComponent} <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">'./components/Child.vue'</span>))</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是App组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载中.....<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">'MyButton'</span>, {</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> ({</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  }),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">'&lt;button @click="count++"&gt;Clicked {{ count }} times.&lt;/button&gt;'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">'focus'</span>, {</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> {</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> {</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> {</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> {</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:close</span>=<span class="string">"handleComponentEvent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:click</span>=<span class="string">"handleNativeClickEvent"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    <span class="attr">emits</span>: [<span class="string">'close'</span>]</span><br><span class="line">  }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—路由</title>
      <link href="/undefined/38900.html"/>
      <url>/undefined/38900.html</url>
      
        <content type="html"><![CDATA[<h2 id="路由的简介"><a href="#路由的简介" class="headerlink" title="路由的简介"></a>路由的简介</h2><h3 id="1-vue-router的理解"><a href="#1-vue-router的理解" class="headerlink" title="1. vue-router的理解"></a>1. vue-router的理解</h3><p>​    vue 的一个插件库，专门用来实现 SPA 应用</p><blockquote><p><strong>对 SPA 应用的理解</strong>：</p><ol><li><p>单页 Web 应用（single page web application，SPA）。 </p></li><li><p>整个应用只有<strong>一个完整的页面</strong>。 </p></li><li><p>点击页面中的导航链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新。</strong> </p></li><li><p>数据需要通过 ajax 请求获取。</p></li></ol></blockquote><h3 id="2-路由的理解"><a href="#2-路由的理解" class="headerlink" title="2. 路由的理解"></a>2. 路由的理解</h3><h4 id="1-什么是路由？"><a href="#1-什么是路由？" class="headerlink" title="1. 什么是路由？"></a>1. 什么是路由？</h4><ol><li><p>一个路由就是一组映射关系（key - value） </p></li><li><p>key 为路径, value 可能是 function 或 component</p></li></ol><h4 id="2-路由分类"><a href="#2-路由分类" class="headerlink" title="2.路由分类"></a>2.路由分类</h4><ol><li><p>后端路由： </p><p>1）理解：value 是 function, 用于处理客户端提交的请求。 </p><p>2）工作过程：服务器接收到一个请求时, 根据<strong>请求路径</strong>找到匹配的<strong>函数</strong></p></li></ol><p>来处理请求, 返回响应数据。 </p><ol start="2"><li><p>前端路由： </p><p>1）理解：value 是 component，用于展示页面内容。 </p><p>2）工作过程：当浏览器的路径改变时, 对应的组件就会显示。</p></li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>安装vue-router，命令：<code>npm i vue-router@3</code>（vue2）</p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//引入Luyou组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">'../componrnts/About'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">'../components/Home'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>({</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">    {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/about'</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">},</span><br><span class="line">    {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/home'</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">}</span><br><span class="line">  ]</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></tbody></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>指定展示位置</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h3><ol><li>路由组件通常存放在<code>page</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</li></ol><h2 id="多级路由（嵌套路由）"><a href="#多级路由（嵌套路由）" class="headerlink" title="多级路由（嵌套路由）"></a>多级路由（嵌套路由）</h2><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">    {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/about'</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">},</span><br><span class="line">    {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/home'</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">        <span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>:<span class="string">'news'</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">path</span>:<span class="string">'message'</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">}</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home/news"</span>&gt;</span>News<span class="tag">&lt;<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h2><ol><li><p>传递参数</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"/home/message/detail?id=666&amp;title=你好"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:to</span>=<span class="string">"{</span></span></span><br><span class="line"><span class="string"><span class="tag">        path:'/home/message/detail',</span></span></span><br><span class="line"><span class="string"><span class="tag">        query:{</span></span></span><br><span class="line"><span class="string"><span class="tag">        id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">        title:"</span>你好"</span></span><br><span class="line"><span class="tag">       }</span></span><br><span class="line"><span class="tag">   }"</span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>接收参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><ol><li><p>作用：可以简化路由的跳转</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">path</span>:<span class="string">'/demo'</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">path</span>:<span class="string">'test'</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">name</span>:<span class="string">'hello'</span><span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">'welcome'</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span></span><br><span class="line">}</span><br><span class="line">]</span><br><span class="line">}</span><br><span class="line">]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>简化跳转：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简化前，需要写完整的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/demo/test/welcome"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简化后，直接通过名字跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"{name:'hello'}"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简化写法配合传递参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:to</span>=<span class="string">"{</span></span></span><br><span class="line"><span class="string"><span class="tag">           name:'hello'</span></span></span><br><span class="line"><span class="string"><span class="tag">           query:{</span></span></span><br><span class="line"><span class="string"><span class="tag">           id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">            title:'你好'</span></span></span><br><span class="line"><span class="string"><span class="tag">           }</span></span></span><br><span class="line"><span class="string"><span class="tag">           }"</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol><h2 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h2><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">path</span>:<span class="string">'/home'</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">path</span>:<span class="string">'test'</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">        },</span><br><span class="line">{</span><br><span class="line"><span class="attr">name</span>:<span class="string">'hello'</span><span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">'welcome/:id/:title'</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span></span><br><span class="line">}</span><br><span class="line">]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>传递参数</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"/home/message/detail/666/你好"</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:to</span>=<span class="string">"{</span></span></span><br><span class="line"><span class="string"><span class="tag">        name:'hello',</span></span></span><br><span class="line"><span class="string"><span class="tag">        params:{</span></span></span><br><span class="line"><span class="string"><span class="tag">        id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">        title:"</span>你好"</span></span><br><span class="line"><span class="tag">       }</span></span><br><span class="line"><span class="tag">   }"</span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h2><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'detail'</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">'detail/:id'</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//第一种写法：props值为对象，该对象中的所有key—value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">    <span class="comment">//props:{a:900}</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二种写法：props值为布尔值，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">    <span class="comment">//props:true</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">     <span class="title function_">props</span>(<span class="params">$route</span>){</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//以上可以通过结构赋值简写，即：</span></span><br><span class="line">    <span class="title function_">props</span>(<span class="params">{query}</span>){</span><br><span class="line">        <span class="keyword">return</span> {</span><br><span class="line">            <span class="attr">id</span>:query.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">title</span>:query.<span class="property">title</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="<router-link>的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h2><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，而<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .....&gt;News&lt;/router-link&gt;</code></li></ol><h2 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h2><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>({</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'detail'</span>,</span><br><span class="line">    <span class="attr">params</span>:{</span><br><span class="line">            <span class="attr">id</span>:xxx,</span><br><span class="line">            <span class="attr">title</span>:xxx</span><br><span class="line">        }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>({</span><br><span class="line">     <span class="attr">name</span>:<span class="string">'detail'</span>,</span><br><span class="line">    <span class="attr">params</span>:{</span><br><span class="line">            <span class="attr">id</span>:xxx,</span><br><span class="line">            <span class="attr">title</span>:xxx</span><br><span class="line">        }</span><br><span class="line">})</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h2><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁</p></li><li><p>具体编码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"News"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h2><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发</li><li><code>deactivated</code>路由组件失活时触发</li></ol></li></ol><blockquote><p>一般配合缓存路由组件做一些异步操作，比如关闭定时器</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) {</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span>{</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span><br><span class="line">},<span class="number">16</span>)</span><br><span class="line">},</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) {</span><br><span class="line"><span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p><strong>全局守卫：</strong></p><p>首先给需要检查的路由添加配置项：<code>meta:{ isAuth: true }</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫，初始化执行时，每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>){ <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">'name'</span>) === <span class="string">'vip'</span>){ <span class="comment">//权限控制的具体规则</span></span><br><span class="line">            <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="title function_">alter</span>(<span class="string">'暂无权限查看'</span>)</span><br><span class="line">            <span class="comment">//next({name:'detail'})</span></span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫，初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>{</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>){</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">'vue_test'</span></span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>独享守卫</strong></p><blockquote><p>beforeEnter配置项，组件独享的守卫，没有后置守卫，但可以配合全局后置守卫使用</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'detail'</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">'/detail'</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">    <span class="attr">meta</span>:{<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">'详情'</span>},</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>){ <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">'name'</span>) === <span class="string">'vip'</span>){ <span class="comment">//权限控制的具体规则</span></span><br><span class="line">            <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="title function_">alter</span>(<span class="string">'暂无权限查看'</span>)</span><br><span class="line">            <span class="comment">//next({name:'detail'})</span></span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>组件内守卫</p><blockquote><p>写在xxx.vue组件内，是一个函数</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫，通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) {</span><br><span class="line">},</span><br><span class="line"><span class="comment">//离开守卫，通过路由规则，离开该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>,next</span>) {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h2><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在HTTP请求中，即：hash值不会带给服务器</li><li><code>hash</code>模式：<ol><li>地址中永远带着#号，不美观</li><li>若以后地址通过第三方手机app分享，若app效验严格，则地址会被标记为不合法</li><li>兼容性较好</li></ol></li><li>history模式：<ol><li>地址干净，美观</li><li>兼容性和hash模式相比略差</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务器404的问题</li></ol></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>({</span><br><span class="line"><span class="attr">mode</span>:<span class="string">'history'</span>, <span class="comment">//默认是'hash'</span></span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">{</span><br><span class="line"><span class="attr">name</span>:<span class="string">'detail'</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">'/detail'</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">}</span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—vuex</title>
      <link href="/undefined/59327.html"/>
      <url>/undefined/59327.html</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间的通信。</p><p>​    <strong>何时使用：</strong>多个组件需要共享数据时</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><img src="../imgs/vuex.png"><h3 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h3><blockquote><p>vue2中，要用vuex的3版本———npm i vuex@3</p><p>vue3中，要用vuex的4版本———npm i vue@4</p></blockquote><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">//引入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备action对象—响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions={}</span><br><span class="line"><span class="comment">//准备mutations对象—修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations={}</span><br><span class="line"><span class="comment">//准备state对象—保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state={}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>({</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入store配置项</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line"><span class="attr">el</span>:<span class="string">'#app'</span>,</span><br><span class="line"><span class="attr">render</span>:<span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>初始化数据，配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = {</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">    <span class="title function_">jia_logic</span>(<span class="params">context,value</span>){</span><br><span class="line">        <span class="comment">//这里写逻辑判断或网络请求</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">'JIA'</span>,value)</span><br><span class="line">    },</span><br><span class="line">}</span><br><span class="line"><span class="keyword">const</span> mutations = {</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state,value</span>){</span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = {</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>({</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名', 数据 )</code>或<code>$store.commot('mutations中的方法名',数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>){</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>({</span><br><span class="line">.....</span><br><span class="line">getters</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><ol><li><p>mapState方法：用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:{</span><br><span class="line"><span class="comment">//借助mapState生成计算属性，sum、school、subject（对象写法）</span></span><br><span class="line">...<span class="title function_">mapState</span>({<span class="attr">sum</span>:<span class="string">'sum'</span>,<span class="attr">school</span>:<span class="string">'school'</span>,<span class="attr">subject</span>:<span class="string">'subject'</span>}),</span><br><span class="line"></span><br><span class="line"><span class="comment">//借助mapState生成计算属性，sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">'sum'</span>,<span class="string">'school'</span>,<span class="string">'subject'</span>]),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>mapGetters方法：用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:{</span><br><span class="line"><span class="comment">//借助mapGetters生成计算属性：bigSum(对象写法)</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>({<span class="attr">bigSum</span>:<span class="string">'bigSum'</span>}),</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum(数组写法)</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">'bigSum'</span>]),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>mapActions方法：用于帮助我们生成与<code>actions</code>对话的方法，即包含：<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:{</span><br><span class="line"><span class="comment">//靠mapActions生成：incrementOdd,incrementWait（对象形式）</span></span><br><span class="line">...<span class="title function_">mapActions</span>({<span class="attr">incrementOdd</span>:<span class="string">'jiaOdd'</span>,<span class="attr">incrementWait</span>:<span class="string">'jiaWait'</span>})</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapActions生成：increamentOdd,increamentWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">'jiaOdd'</span>,<span class="string">'jiaWait'</span>])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>mapMutations方法：用于帮助我们生成与<code>mutations</code>对话的方法，即包含：`$store.comit(xxx)的函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:{</span><br><span class="line"><span class="comment">//靠mapMutations生成，increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>({<span class="attr">increment</span>:<span class="string">'JIA'</span>,<span class="attr">decrement</span>:<span class="string">'JIAN'</span>}),</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//靠mapMutations生成，JIA，JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">'JIA'</span>,<span class="string">'JIAN'</span>]),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote></li></ol><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确</p></li><li><p>修改<code>store.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countOptions = {</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">    <span class="attr">state</span>:{...},</span><br><span class="line">    <span class="attr">mutations</span>:{...},</span><br><span class="line">    <span class="attr">actions</span>:{...},</span><br><span class="line">    <span class="attr">getters</span>:{...}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personOptions = {</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">    <span class="attr">state</span>:{...},</span><br><span class="line">    <span class="attr">mutations</span>:{...},</span><br><span class="line">    <span class="attr">actions</span>:{...},</span><br><span class="line">    <span class="attr">getters</span>:{...}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>({</span><br><span class="line">     <span class="attr">modules</span>:{</span><br><span class="line">        countOptions,</span><br><span class="line">        personOptions</span><br><span class="line">    }        </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：直接读取：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">countOptions</span>.<span class="property">sum</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">'countOptions'</span>,[<span class="string">'sum'</span>,<span class="string">'school'</span>,<span class="string">'subject'</span>])</span><br></pre></td></tr></tbody></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：直接读取：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">'personOptions/firstPersonName'</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">'countOptions'</span>,[<span class="string">'firstPersonName'</span>])</span><br></pre></td></tr></tbody></table></figure></li><li><p>开启命名空间后，组件中调用dispatch：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：直接读取：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">'personOptions/addPersonWang'</span>,personObj)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">'countOptions'</span>,{<span class="attr">addWang</span>:addPersonWang})</span><br></pre></td></tr></tbody></table></figure></li><li><p>开启命名空间后，组件中调用commit：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：直接读取：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">'personOptions/ADD_PERSON'</span>,personObj)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">'personOptions'</span>,{<span class="attr">add</span>:<span class="string">'ADD_PERSON'</span>})</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—组件式编程</title>
      <link href="/undefined/52753.html"/>
      <url>/undefined/52753.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块与组件、模块化与组件化"><a href="#模块与组件、模块化与组件化" class="headerlink" title="模块与组件、模块化与组件化"></a>模块与组件、模块化与组件化</h2><h3 id="1-模块"><a href="#1-模块" class="headerlink" title="1. 模块"></a>1. 模块</h3><ol><li>理解：向外提供特定功能的js程序，一般就是一个js文件</li><li>为什么：js文件很多很复杂</li><li>作用：复用js，简化js的编写，提高js运行效率</li></ol><h3 id="2-组件"><a href="#2-组件" class="headerlink" title="2. 组件"></a>2. 组件</h3><ol><li>理解：用来实现局部（特定）功能效果的代码集合（html/css/js/image…)</li><li>为什么：一个页面功能很复杂</li><li>作用：复用编码，简化项目编码，提高运行效率</li></ol><h3 id="3-模块化"><a href="#3-模块化" class="headerlink" title="3. 模块化"></a>3. 模块化</h3><p>​    当应用中的js都以模块来编写的，那这个应用就是一个模块化的应用</p><h3 id="4-组件化"><a href="#4-组件化" class="headerlink" title="4. 组件化"></a>4. 组件化</h3><p>​    当应用中的功能都是多功能组件的方式来编写的，那这个应用就是一个组件化的应用</p><h2 id="非单文件组件与单文件组件"><a href="#非单文件组件与单文件组件" class="headerlink" title="非单文件组件与单文件组件"></a>非单文件组件与单文件组件</h2><h3 id="Vue中使用组件的三大步骤："><a href="#Vue中使用组件的三大步骤：" class="headerlink" title="Vue中使用组件的三大步骤："></a>Vue中使用组件的三大步骤：</h3><ol><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件</li></ol><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><ol><li>模块编写没有提示</li><li>没有构建过程</li><li>不支持组件的CSS</li><li>真正开发几乎不用</li></ol><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><h4 id="一个-vue文件的组成"><a href="#一个-vue文件的组成" class="headerlink" title="一个.vue文件的组成"></a>一个.vue文件的组成</h4><ol><li><p>模板页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>JS模块对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span>{</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>){<span class="keyword">return</span>{}},</span><br><span class="line">        <span class="attr">methods</span>:{},</span><br><span class="line">        <span class="attr">computed</span>:{},</span><br><span class="line">        <span class="attr">components</span>:{}</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">/* 样式定义 */</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li>引入组件</li><li>映射成标签</li><li>使用组件标签</li></ol><h2 id="VueComponent构造函数"><a href="#VueComponent构造函数" class="headerlink" title="VueComponent构造函数"></a>VueComponent构造函数</h2><ol><li><p>一个组件比如school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p></li><li><p>我们只需要写组件标签，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</p></li><li><p>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！</p></li><li><p>关于this指向：</p><p>（1）组件配置中：</p><p>​        data函数、methods中的函数、watch中的函数、computed中的函数  它们的this均是【VueComponent实例对象】</p><p>（2）new Vue(options)配置中：</p><p>​        data函数、methods中的函数、watch中的函数、computed中的函数  它们的this均是【Vue实例对象】</p></li></ol><h2 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h2><ol><li>一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype </li><li>为什么要有这个关系：让组件实例对象 vc 可以访问到Vue原型上的属性、方法</li></ol><img src="..\imgs\一个内置关系.png"><h2 id="使用Vue-cli（Vue脚手架）"><a href="#使用Vue-cli（Vue脚手架）" class="headerlink" title="使用Vue-cli（Vue脚手架）"></a>使用Vue-cli（Vue脚手架）</h2><h3 id="1-具体步骤"><a href="#1-具体步骤" class="headerlink" title="1. 具体步骤"></a>1. 具体步骤</h3><ol><li><p>第一步（仅第一次执行）：全局安装@vue/cli</p><blockquote><p>npm install -g @vue/cli</p></blockquote></li><li><p>切换到你要创建项目的目录，然后使用命令创建项目</p><blockquote><p>vue create xxx</p></blockquote></li><li><p>启动项目</p><blockquote><p>npm run serve</p></blockquote></li><li><p>备注</p><blockquote><p>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p></blockquote></li></ol><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><blockquote><p><strong>关于不同版本的Vue：</strong></p><ol><li><p>vue.js与vue.runtime.xxx.js的区别：</p><p>（1）vue.js是完整版的Vue，包含：核心功能+模板解析器</p><p>（2）vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；</p></li><li><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p></li></ol></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render:h =&gt; h(App)</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params">createElement</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="string">'h1'</span>,<span class="string">'你好啊'</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li><p>被用来给元素或子组件注册引用信息（id的替代者）</p></li><li><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</p></li><li><p>使用方式：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">"xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">School</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取:this.$refs.xxx --&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><p> <strong>功能：让组件接收外部传过来的数据</strong></p><p>（1）传递数据：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- :是v-bind简写，让""里面进行表达式运算，值为Number类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">:age</span>=<span class="string">"18"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>（2）接收数据：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式（只接收）</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">'name'</span>,<span class="string">'age'</span>]</span><br><span class="line"><span class="comment">//第二种方式（限制类型，不是强制转换，而是控制台会报错提示）：</span></span><br><span class="line"><span class="attr">props</span>:{</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="title class_">Number</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//第三种方式（限制类型、限制必要性、指定默认值）</span></span><br><span class="line"><span class="attr">props</span>:{</span><br><span class="line">    <span class="attr">name</span>:{</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">            <span class="attr">required</span>:<span class="literal">true</span> <span class="comment">//必要性</span></span><br><span class="line">    },</span><br><span class="line">        <span class="attr">age</span>:{</span><br><span class="line">            <span class="attr">type</span>:<span class="title class_">Number</span>, <span class="comment">//类型</span></span><br><span class="line">                <span class="attr">default</span>:<span class="number">99</span></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>备注：</strong> props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p><h2 id="mixin混入、插件、scoped样式"><a href="#mixin混入、插件、scoped样式" class="headerlink" title="mixin混入、插件、scoped样式"></a>mixin混入、插件、scoped样式</h2><h3 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a>mixin混入</h3><blockquote><p>功能：可以把多个组件共用的配置提取成一个混入对象</p><p>使用方式：</p><p>​    第一步定义混合，例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>){...}</span><br><span class="line"><span class="attr">methods</span>:{...}</span><br><span class="line"> ....</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二步导入后使用混入，例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局混入：</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(xxx)</span><br><span class="line"><span class="comment">//局部混入：</span></span><br><span class="line"><span class="attr">mixins</span>:[<span class="string">'xxx'</span>]</span><br></pre></td></tr></tbody></table></figure></blockquote><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><blockquote><p>功能：用于增强Vue</p><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p><p>定义插件：</p><p>对象.install = function (Vue,options){</p><p>​    //1. 添加全局过滤器</p><p>​    Vue.filter(…)</p><p>​    //2. 添加实例方法</p><p>​    Vue.prototype.$myMethod = function(){…}</p><p>}</p><p>使用插件：Vue.use()</p></blockquote><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><blockquote><p>作用：让样式在局部生效，防止冲突</p><p>写法：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>拓展：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 里面可以写less语法，不过脚手架需要npm i less-loader且版本要与webpack对应，比如webpack5.x对应less-loader@9或者8 --&gt;</span></span><br></pre></td></tr></tbody></table></figure></blockquote><p>原理：</p><img src="..\imgs\scoped原理.png"><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><ol><li><p>一种组件间通信的方式，适用<strong>任意组件</strong>间通信</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">...</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>){</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装，$bus就是当前应用的vm</span></span><br><span class="line">},</span><br><span class="line">...</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>){</span><br><span class="line"><span class="title function_">demo</span>(<span class="params">data</span>){</span><br><span class="line">....</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>){</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">'xxx'</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)<span class="comment">//绑定自定义事件</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>提供数据：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">'xxx'</span>,数据) <span class="comment">//调用这个自定义方法并传值</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件</p></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><ol><li><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(回调函数)</span><br></pre></td></tr></tbody></table></figure></li><li><p>作用： 在下一次DOM更新结束后执行其指定的回调</p></li><li><p>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。（说白了就是重新解析模板后执行回调函数，一般是在某个函数新添加或显示的比如input框什么的进行的操作）</p></li></ol><h2 id="Vue封装的过渡与动画"><a href="#Vue封装的过渡与动画" class="headerlink" title="Vue封装的过渡与动画"></a>Vue封装的过渡与动画</h2><ol><li><p>作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：</p><img src="..\imgs\Vue封装的过度与动画.png"></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter: 进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式<ol><li>v-enter: 离开的起点</li><li>v-enter-active：离开过程中</li><li>v-enter-to：离开的终点</li></ol></li></ul></li><li><p>使用transition标签包裹要过渡的元素，并配置name属性：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>备注：若多个元素需要过渡，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p></li></ol></li></ol><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><blockquote><p>只需要研究：进入的起点、进入的终点、离开的起点、离开的终点</p></blockquote><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><blockquote><p>只需要研究：进入的过程中、离开的过程中</p></blockquote><p>以引用第三方动画库animate.css为例：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag"><span class="attr">appear</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"animate_animated animate_bounce"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">enter-active-class</span>=<span class="string">"animate_swing"</span></span></span><br><span class="line"><span class="tag"><span class="attr">leave-active-class</span>=<span class="string">"animate_baclOutUp"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Vue脚手架配置代理"><a href="#Vue脚手架配置代理" class="headerlink" title="Vue脚手架配置代理"></a>Vue脚手架配置代理</h2><blockquote><p>​    在localhost:8080直接向localhost:5000请求资源，会发生跨域问题，所以需要一台代理服务器作为中间转发与接收，端口号与本地8080一致</p></blockquote><p>首先npm i axios库，然后import引入</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getStudents"</span>&gt;</span>获取学生信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>{</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">'App'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:{</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getStudents</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">get</span>(<span class="string">'http://localhost:5000/students'</span>).<span class="property">then</span>{</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">response</span> =&gt;</span>{</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'请求成功了'</span>,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">                    },</span></span><br><span class="line"><span class="language-javascript">                    <span class="function"><span class="params">error</span> =&gt;</span>{</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'请求失败了'</span>,error.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">                    }</span></span><br><span class="line"><span class="language-javascript">                }</span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置代理服务器，请求端口是5000</span></span><br><span class="line"><span class="attr">devServer</span>:{</span><br><span class="line"><span class="attr">proxy</span>:<span class="string">"http://localhost:5000"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么请求会转发给服务器（优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:{</span><br><span class="line">    <span class="attr">proxy</span>:{</span><br><span class="line">        <span class="string">'api1'</span>:{ <span class="comment">//匹配所有以'/api1'开头的请求路径</span></span><br><span class="line">         <span class="attr">target</span>:<span class="string">'http://localhost:5000'</span>,<span class="comment">//代理目标的基础路径</span></span><br><span class="line">         <span class="attr">changOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">         <span class="attr">pathRewrite</span>:{<span class="string">'^/api1'</span>:<span class="string">''</span>}<span class="comment">//重写路径，把'/api1'重写成空字符</span></span><br><span class="line">        },</span><br><span class="line">         <span class="string">'api2'</span>:{<span class="comment">//匹配所有以'/api1'开头的请求路径</span></span><br><span class="line">          <span class="attr">target</span>:<span class="string">'http://localhost:5001'</span>,<span class="comment">//代理目标的基础路径</span></span><br><span class="line">          <span class="attr">changOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="attr">pathRewrite</span>:{<span class="string">'^/api1'</span>:<span class="string">''</span>}<span class="comment">//重写路径，把'/api1'重写成空字符</span></span><br><span class="line">         }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">changOrigin设置为true时，服务器收到的请求中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">changOrigin设置为false时，服务器收到的请求中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">changOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong></p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容，没有传结构时显示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>具名插槽：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"center"</span>&gt;</span>插槽默认内容，没有传结构时显示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span>插槽默认内容，没有传结构时显示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App决定）</p></li><li><p>具体编码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">"scopeData"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成的是ul列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"g in scopeData.games"</span> <span class="attr">:key</span>=<span class="string">"g"</span>&gt;</span>{{g}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用结构赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"{games}"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 生成的是h4标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">"g in games"</span> <span class="attr">:key</span>=<span class="string">"g"</span>&gt;</span>{{g}}<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line">子组件中：</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">"games"</span>&gt;</span>插槽默认内容，没有传结构时显示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="attr">default</span>:{</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">'Category'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//数据在子组件自身</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>){</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>(){</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">games</span>:[<span class="string">'cf'</span>,<span class="string">'cs-go'</span>,<span class="string">'英雄联盟'</span>,<span class="string">'超级玛丽'</span>]</span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—生命周期</title>
      <link href="/undefined/36550.html"/>
      <url>/undefined/36550.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2-0学习—生命周期"><a href="#Vue2-0学习—生命周期" class="headerlink" title="Vue2.0学习—生命周期"></a>Vue2.0学习—生命周期</h2><img src="..\imgs\生命周期.png"><blockquote><p>以上生命周期函数都可以用debugger逐个断点测试验证</p></blockquote><ul><li><p>常用的生命周期钩子（回调函数）</p><ol><li>mounted：发送ajax请求，启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li>beforeDestroy：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol></li><li><p>关于销毁Vue实例</p><ol><li>销毁后借助Vue开发工具看不到任何信息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li></ol></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"{opacity}"</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"opacity = 1"</span>&gt;</span>透明度设置为1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span>点我停止变换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* js部分 */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line"><span class="attr">opacity</span>:<span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">methods</span>:{</span><br><span class="line"><span class="title function_">stop</span>(<span class="params"></span>){</span><br><span class="line">            <span class="variable language_">this</span>.$destroy()</span><br><span class="line">        }</span><br><span class="line">    },</span><br><span class="line">    <span class="comment">//Vue完成模板解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'mounted'</span>,<span class="variable language_">this</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span><br><span class="line">        },<span class="number">16</span>)</span><br><span class="line">    },</span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'vm即将挂了'</span>)</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0学习—基础知识</title>
      <link href="/undefined/22330.html"/>
      <url>/undefined/22330.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><ol><li><p>插值语法:</p><p>功能：用于解析标签体内容</p><p>写法：，其中xxx是js表达式，且可以直接读取到data中的所有属性。</p></li><li><p>指令语法：</p><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件……）</p><p>举例：v-bind:href=”xxx”或 简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p></li></ol><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><blockquote><p>v-bind：单向绑定解析表达式，可简写为：  :xxx<br>v-model：双向数据绑定<br>v-for：遍历数组/对象/字符串<br>v-on：绑定事件监听，可简写为@<br>v-if：条件渲染（动态控制节点是否存在）<br>v-else：条件渲染（动态控制节点是否存在）<br>v-show：条件渲染（动态控制节点是否展示）<br>v-text：向其所在节点中渲染文本内容<br>v-hml：比v-text多了结构解析的功能<br>v-cloak：本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。配合css[可以解决网速慢时页面展示出的问题。<br>v-once：所在节点在初次动态渲染后，就视为静态内容。<br>v-pre：跳过其所在节点的编译过程</p></blockquote><ol><li><p>数据绑定</p><ol><li><p>单向绑定：’ v-bind:value ‘，简写：’:value’，数据只能从data流向页面。</p></li><li><p>双向绑定：’ v-model:value ‘，简写：’v-model’，数据不仅能从data流向页面，还可以从页面流向data</p><p>注意：v-model只能应用在表单类元素（如：input、select等）</p></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如下代码是错误的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-model:x="name"&gt;你好&lt;/h2&gt;--&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>事件处理</p><ul><li><p>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名。</p></li><li><p>@click=”demo” 和@click=”demo($event)” 效果一致，但后者可以传参。</p></li><li><p>@keyup.enter、@keydown.enter<br>Vue中的事件修饰符：</p><ol><li><p>prevent：阻止默认事件（常用，比如a连接点击跳转事件）</p></li><li><p>stop：阻止事件冒泡（常用）</p></li><li><p>once：事件只触发一次（常用）</p></li><li><p>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</p></li></ol><p>Vue中常用的按键别名：</p><ol><li><p>回车 =&gt; enter</p></li><li><p>删除 =&gt; delete（捕获“删除”和“退格”键）</p></li><li><p>退出 =&gt; esc</p></li><li><p>空格 =&gt; space</p></li><li><p>换行 =&gt; tab （特殊，必须配合keydown使用）</p></li><li><p>上 =&gt;up、下 =&gt; down、左 =&gt;left、右 =&gt; right</p></li></ol></li></ul></li><li><p>条件渲染：</p><ol><li>v-if<br>写法：<br>​    （1）v-if=”表达式”<br>​    （2）v-else-if=”表达式”<br>​    （3）v-else=”表达式”<br>适用于：切换频率较低的场景。<br>特点：不展示的DOM元素直接被移除<br>注意：v-if可以和：v-else-if、v-else一起使用，但要求结构不能被“打断”。</li><li>v-show：<br>写法：v-show=”表达式”<br>适用于：切换频率较高的场景<br>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template标签只能配合v-if使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该标签作用是条件成立时显示以下结构，不会留下该标签痕迹 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不同于再套一个div，会破坏原有结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"n===1"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>列表渲染：</p><p>v-for指令：</p><ol><li><p>用于展示列表数据</p></li><li><p>语法：v-for=”(item,index) in xxx” :key=”yyy”</p></li><li><p>可遍历：数组、对象、字符串（少见）   </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"p in persons"</span> <span class="attr">:key</span>=<span class="string">"p.id"</span>&gt;</span></span><br><span class="line">          {{p.name}}-{{p.age}}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">'#root'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">                    {<span class="attr">id</span>:<span class="string">'001'</span>,<span class="attr">name</span>:<span class="string">'张三'</span>,<span class="attr">age</span>: <span class="number">18</span> },</span></span><br><span class="line"><span class="language-javascript">                    {<span class="attr">id</span>:<span class="string">'002'</span>,<span class="attr">name</span>:<span class="string">'李四'</span>,<span class="attr">age</span>: <span class="number">19</span> },</span></span><br><span class="line"><span class="language-javascript">                    {<span class="attr">id</span>:<span class="string">'003'</span>,<span class="attr">name</span>:<span class="string">'王五'</span>,<span class="attr">age</span>: <span class="number">20</span> }</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">    }) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>！面试题：vue中的key有什么作用？（key的内部原理）</strong></p><ol><li>虚拟DOM中key的作用：<br>key是虚拟DOM对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</li><li>对比规则（diff算法）：<br>（1）旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>   ①.若虚拟DOM中内容没变，直接使用之前的真实DOM<br>   ②.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM。<br>  （2）旧虚拟DOM中未找到与新虚拟DOM相同的key：<br>       创建新的真实DOM，随后渲染到页面上</li><li>用index作为key可能会引发的问题：<ol><li>若数据进行逆序添加、逆序删除等破坏结构的顺序操作会产生没有必要的真实DOM更新 ==&gt; 页面效果没问题，但效率低。</li><li>如果结构中还包含输入类的DOM会产生错误的DOM更新 ==&gt; 页面出问题</li></ol></li><li>开发中如何选择key？<ol><li>最好使用每条数据的唯一标识作为key，比如id、手机号、学号等等</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ol></li></ol></li></ol></li><li><p>v-text指令：</p><ol><li>作用：向其所在的节点中渲染文本内容</li><li>与插值语法的区别：v-text会替换掉节点中的内容，则不会</li></ol></li><li><p>v-html指令：</p><ol><li>作用：与v-text相比多了支持结构的解析</li><li>注意：安全性问题，比如cookie的盗用，例如评论回复如果使用v-html解析连接标签跟上document.cookie会盗取cookie，不过好的一些服务器会限制HttpOnly不让直接获取cookie。</li></ol></li><li><p>v-cloak指令：<br>​    本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。配合css[可以解决网速慢时页面展示出的问题。<br>css：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-attr">[v-cloak]</span>{</span></span><br><span class="line"><span class="language-css">     <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css"> }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>html：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>v-once指令：</p><ol><li>v-once所在节点在初次动态渲染后，就监视为静态内容了。</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值是：{{n}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：{{n}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"n++"</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>v-pre指令：</p><ol><li>跳过其所在节点的编译过程</li><li>可利用它跳过：没有使用指令语法，没有使用插值语法的节点，会加快编译。</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><ol><li><p>定义语法：<br>（1）局部指令：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">  <span class="attr">directives</span>:{指令名：配置对象}</span><br><span class="line">})</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">  <span class="attr">directives</span>:{指令名：回调函数}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>（2）全局指令：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名,配置对象)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名,回调函数)</span><br></pre></td></tr></tbody></table></figure></li><li><p>配置对象中常用的3个回调：</p><p>（1）bind：指令与元素成功绑定时调用。</p><p>（2）inserted：指令所在元素被插入页面时调用。</p><p>（3）update：指令所在模板结构被重新解析时调用。</p></li><li><p>备注</p><ol><li>指令定义时不加v-，但使用时要加v-</li><li>指令名如果是多个单词，要使用user-name命名方式，不要使用userName方式命名</li></ol></li></ol><p>函数式：</p><blockquote><p>需求：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"n"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">"n"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"n++"</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* js部分 */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">name</span>:<span class="string">'小明'</span>,</span><br><span class="line">        <span class="attr">n</span>:<span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">directive</span>:{</span><br><span class="line">        <span class="comment">//big函数何时会被调用？1.指令与元素成功绑定时 2.指令所在的模板被重新解析时</span></span><br><span class="line">        <span class="title function_">big</span>(<span class="params">element,binding</span>){</span><br><span class="line">            element.<span class="property">innerText</span> = binding.<span class="property">value</span> = <span class="number">10</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>对象式：</p><blockquote><p>需求：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"n"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-fbind:value</span>=<span class="string">"n"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* js部分 */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">name</span>:<span class="string">'小明'</span>,</span><br><span class="line">        <span class="attr">n</span>:<span class="number">1</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">directive</span>:{</span><br><span class="line">        <span class="attr">fbind</span>:{</span><br><span class="line">            <span class="comment">//指令与元素成功绑定时</span></span><br><span class="line">            <span class="title function_">bind</span>(<span class="params">element,binding</span>){</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">            <span class="title function_">inserted</span>(<span class="params">element,binding</span>){</span><br><span class="line">                element.<span class="title function_">focus</span>()</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">            <span class="title function_">update</span>(<span class="params">element,binding</span>){</span><br><span class="line">                element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="data与el的两种写法"><a href="#data与el的两种写法" class="headerlink" title="data与el的两种写法"></a>data与el的两种写法</h2><ol><li><p>el的2种写法</p><p>(1). new Vue时候配置el属性</p><p>(2). 先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</p></li><li><p>data的2中写法</p><p>(1). 对象式</p><p>(2). 函数式</p><p>如何选择：以后学到组件时，data必须使用函数式，否则会报错。</p></li><li><p>一个重要的原则：</p><p>由Vue管理的函数，一定不要写箭头函数，一旦写箭头函数，this就不再是Vue实例了。</p></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">name</span>:<span class="string">'小明'</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">return</span>{</span><br><span class="line">            <span class="attr">name</span>:<span class="string">'小明'</span></span><br><span class="line">        } <span class="comment">//返回一个对象</span></span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">v.$mount(<span class="string">'#root'</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="Vue的MVVM模型"><a href="#Vue的MVVM模型" class="headerlink" title="Vue的MVVM模型"></a>Vue的MVVM模型</h2><h5 id="MVVM介绍"><a href="#MVVM介绍" class="headerlink" title="MVVM介绍"></a>MVVM介绍</h5><blockquote><p>​    MVVM 是<a href="https://so.csdn.net/so/search?q=Model&amp;spm=1001.2101.3001.7020">Model</a>-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。</p><p>​    Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。</p></blockquote><h5 id="Vue-js中MVVM的体现"><a href="#Vue-js中MVVM的体现" class="headerlink" title="Vue.js中MVVM的体现"></a>Vue.js中MVVM的体现</h5><ol><li>M：模型（Model）：对应data中的数据</li><li>V：视图（View）：模板</li><li>VM：视图模型（ViewModel）：Vue实例对象</li></ol><img src="../imgs/vue-MVVM.png" style="zoom:80%;"><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><ol><li><p>回顾Object.defineproperty方法</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = {</span><br><span class="line">    <span class="attr">name</span>:<span class="string">'张三'</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">'男'</span>,</span><br><span class="line">}</span><br><span class="line"><span class="comment">//三个参数,为person对象添加age，并且数据来源于number</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person,<span class="string">'age'</span>,{</span><br><span class="line">    <span class="comment">//value:18,</span></span><br><span class="line">    <span class="comment">//enumerable:true, //控制属性是否可以被枚举，默认false</span></span><br><span class="line">    <span class="comment">//writable:true, //控制属性是否可以被修改</span></span><br><span class="line">    <span class="comment">//configurable:true //控制属性是否可以被删除，delete person.age</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>){</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'有人读取age属性了'</span>)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    },</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'有人修改了age属性，且值是'</span>,value)</span><br><span class="line">        number = value</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>理解数据代理</p><blockquote><p>数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {<span class="attr">x</span>:<span class="number">100</span>}</span><br><span class="line"><span class="keyword">let</span> obj2 = {<span class="attr">y</span>:<span class="number">200</span>}</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">'x'</span>,{</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">},</span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>){</span><br><span class="line">obj.<span class="property">x</span> = value</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src="../imgs/v-数据代理.png"></li><li><p>Vue中的数据代理</p><blockquote><ol><li><p>Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读/写）</p></li><li><p>Vue中数据代理的好处：更加方便的操作data中的数据</p></li><li><p>基本原理：</p><p>通过Object.defineProperty()把data对象中所有属性添加到vm上。</p><p>为每一个添加到vm上的属性，都指定一个getter/setter。</p><p>在getter/setter内容去操作（读/写）data中对应的属性</p></li></ol><p>插值表达式其实是表示，只不过因为数据代理的应用，可以直接简写成</p></blockquote><img src="..\imgs\vue数据代理.png"><blockquote><p>但是_data中的数据并不是{name:…,address:…}一个对象，而是通过数据劫持（不是数据代理），升级成了与数据代理长相差不多的，主要完成响应式的操作，检测 _data中数据改变从而改变的值。</p></blockquote></li></ol><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ol><li><p>定义：要用的属性不存在，要通过已有属性计算得来。</p></li><li><p>原理：底层借助了Object.defineproperty方法提供的getter和setter。</p></li><li><p>get函数什么时候执行？</p><p>（1）初次读取时会执行一次</p><p>（2）当依赖的数据发生改变时会再次调用。</p></li><li><p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p></li><li><p>备注：</p><ol><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ol></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">'张'</span>,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">'三'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">computed</span>:{</span><br><span class="line">        <span class="attr">fullName</span>:{</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>){</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"get被调用了"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">'-'</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">            },</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">value</span>){ <span class="comment">//vm.fullName = xxx，这时set函数起作用</span></span><br><span class="line">                <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">'-'</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="计算属性简写"><a href="#计算属性简写" class="headerlink" title="计算属性简写"></a>计算属性简写</h3><ul><li>只有考虑读取的时候，不考虑修改的时候才可以使用</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">'张'</span>,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">'三'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">computed</span>:{</span><br><span class="line">        <span class="title function_">fullName</span>(<span class="params"></span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"get被调用了"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">'-'</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">}</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p>监视属性watch：</p><ol><li><p>当被监视的属性变化时，回调函数（handler）自动调用，进行相关操作</p></li><li><p>监视的属性必须存在，才能进行监视</p></li><li><p>监视属性的两种写法：</p><p>（1）new Vue时传入watch配置</p><p>（2）通过vm.$watch监视</p></li></ol><p>深度监视：</p><ol><li>Vue中的watch默认不监测对象内部值的改变（一层）</li><li>配置deep:true可以检测对象内部值的改变（多层）</li></ol><p>备注：</p><ol><li>Vue自身可以检测对象内部值的改变，但Vue提供的watch默认不可以</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line"><span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line"><span class="attr">data</span>:{</span><br><span class="line"><span class="attr">isHot</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">numbers</span>:{</span><br><span class="line">            <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">b</span>:<span class="number">1</span></span><br><span class="line">        }</span><br><span class="line">},</span><br><span class="line"><span class="attr">watch</span>:{</span><br><span class="line">        <span class="attr">isHot</span>:{</span><br><span class="line">            <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line"><span class="comment">//handler什么时候调用？当isHot发生改变时</span></span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'isHot被修改了'</span>，newValue,oldValue)</span><br><span class="line">},</span><br><span class="line">         <span class="attr">numbers</span>:{ <span class="comment">//监视多级结构中所有属性的变化</span></span><br><span class="line">             <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">             <span class="title function_">handler</span>(<span class="params"></span>){</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'numbers改变了'</span>)</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">})</span><br><span class="line"><span class="comment">/*vm.$watch('isHot',{</span></span><br><span class="line"><span class="comment">immediate:true, //初始化时让handler调用一下</span></span><br><span class="line"><span class="comment">handler什么时候调用？当isHot发生改变时</span></span><br><span class="line"><span class="comment">handler(newValue,oldValue){</span></span><br><span class="line"><span class="comment">console.log('isHot被修改了'，newValue,oldValue)</span></span><br><span class="line"><span class="comment">})*/</span></span><br></pre></td></tr></tbody></table></figure><h4 id="监视的简写形式"><a href="#监视的简写形式" class="headerlink" title="监视的简写形式"></a>监视的简写形式</h4><blockquote><p>和计算属性简写形式差不多，当配置项只有handler时可以使用简写</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line"><span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line"><span class="attr">data</span>:{</span><br><span class="line"><span class="attr">isHot</span>:<span class="literal">true</span></span><br><span class="line">},</span><br><span class="line"><span class="attr">watch</span>:{</span><br><span class="line">        <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'isHot被修改了'</span>，newValue,oldValue)</span><br><span class="line">}</span><br><span class="line">       }</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="watch对比computed"><a href="#watch对比computed" class="headerlink" title="watch对比computed"></a>watch对比computed</h2><p>computed和watch之间的区别：</p><ol><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">    <span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">firstName</span>:<span class="string">'张'</span>,</span><br><span class="line">        <span class="attr">lastName</span>:<span class="string">'三'</span>,</span><br><span class="line">        <span class="attr">fullName</span>:<span class="string">'张-三'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">watch</span>:{</span><br><span class="line">        <span class="title function_">firstName</span>(<span class="params">val</span>){</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">'-'</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">            },<span class="number">1000</span>)</span><br><span class="line">        },</span><br><span class="line">        <span class="title function_">lastName</span>(<span class="params">val</span>){</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">'-'</span> + val</span><br><span class="line">            },<span class="number">1000</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><ol><li><p>class样式</p><p>写法：:class=”xxx”  xxx可以是字符串，对象，数组</p><p>对象写法适用于：类名不确定，要动态获取</p><p>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</p></li><li><p>style样式</p><p>:style=”{fontSize: xxx}”其中xxx是动态值</p><p>:style=”[a,b]”其中a、b是样式对象</p></li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"basic"</span> <span class="attr">:class</span>=<span class="string">"mood"</span> @<span class="attr">click</span>=<span class="string">"changeMood"</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定，名字不确定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"basic"</span> <span class="attr">:class</span>=<span class="string">"classArr"</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"basic"</span> <span class="attr">:class</span>=<span class="string">"classObj"</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"basic"</span> <span class="attr">:style</span>=<span class="string">"styleObj"</span>&gt;</span>{{name}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">'#root'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:{</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">'小明'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mood</span>:<span class="string">'normol'</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classArr</span>:[<span class="string">'demo1'</span>,<span class="string">'demo2'</span>,<span class="string">'demo3'</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classObj</span>:{</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">demo1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">demo2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            },</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObj</span>:{</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>:<span class="string">'40px'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">backgroundColor</span>:<span class="string">'orange'</span>  <span class="comment">//两个单词需要驼峰命名</span></span></span><br><span class="line"><span class="language-javascript">            }</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Vue监视数据原理"><a href="#Vue监视数据原理" class="headerlink" title="Vue监视数据原理"></a>Vue监视数据原理</h2><blockquote><p>Vue监视数据的原理：</p><ol><li><p>vue会监视data中所有层次的数据</p></li><li><p>如何检测对象中的数据？</p><p>通过setter实现监视，且要在new Vue时就传入要监视的数据。</p><p>（1）对象中后追加的属性，vue默认不做响应式处理</p><p>（2）如需给后添加的属性做响应式，请使用如下API：</p><p>​    Vue.set(target, propertyName/index, value) 或</p><p>​    vm.$set(target, propertyName/index, value)</p></li><li><p>如何监视数组中的数据？</p><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><p>（1）调用原生对应的方法对数组进行更新。</p><p>（2）重新解析模板，进而更新界面。</p></li><li><p>在Vue修改数组中的某个元素一定要用如下方法：</p><ol><li>使用这些API：push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或vm.$set()</li></ol><p>注意：Vue.set() 或vm.$set()  不能给vm或vm的根数据对象 添加属性！</p></li></ol></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line"><span class="attr">el</span>:<span class="string">'#root'</span>,</span><br><span class="line"><span class="attr">data</span>:{</span><br><span class="line"><span class="attr">student</span>:{</span><br><span class="line"><span class="attr">name</span>:<span class="string">'tom'</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">hobby</span>:[<span class="string">'玩游戏'</span>,<span class="string">'唱歌'</span>,<span class="string">'跳舞'</span>]</span><br><span class="line">},</span><br><span class="line"><span class="attr">friends</span>:[</span><br><span class="line">{<span class="attr">name</span>:<span class="string">'jerry'</span>,<span class="attr">age</span>:<span class="number">35</span>},</span><br><span class="line">{<span class="attr">name</span>:<span class="string">'tony'</span>,<span class="attr">age</span>:<span class="number">36</span>}</span><br><span class="line">]</span><br><span class="line">},</span><br><span class="line"><span class="attr">methods</span>:{</span><br><span class="line"><span class="title function_">addSex</span>(<span class="params"></span>){</span><br><span class="line"><span class="comment">//Vue.set(this.student,'sex','男')</span></span><br><span class="line"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">'sex'</span>,<span class="string">'男'</span>)</span><br><span class="line">},</span><br><span class="line"><span class="title function_">addFriend</span>(<span class="params"></span>){</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">student</span>,friends.<span class="title function_">unshift</span>({<span class="attr">name</span>:<span class="string">'jack'</span>,<span class="attr">age</span>:<span class="number">20</span>})</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><img src="../imgs/v-监视数据.png">]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_ES6新特性(2)</title>
      <link href="/undefined/1.html"/>
      <url>/undefined/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="第七种数据类型，Symbol"><a href="#第七种数据类型，Symbol" class="headerlink" title="第七种数据类型，Symbol()"></a>第七种数据类型，Symbol()</h2><ol><li><p>基础语法</p><blockquote><p>js的数据类型：数值，字符串，布尔，对象，null，undefined，Symbol<br>symbol可以当做对象的属性名，对象：key value对</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const level1 = Symbol("level");</span></span><br><span class="line"><span class="comment">//const level2 = Symbol("level");</span></span><br><span class="line"><span class="comment">//console.log(level1 === level2) //false，下面可以简写</span></span><br><span class="line"><span class="keyword">const</span> student = {</span><br><span class="line"><span class="attr">name</span>:<span class="string">"小明"</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">16</span>,</span><br><span class="line"><span class="comment">//[level]:"优秀" //es6新特性：变量当key要加[]</span></span><br><span class="line">[<span class="title class_">Symbol</span>(<span class="string">"level"</span>)]:<span class="string">"优秀"</span>,</span><br><span class="line">[<span class="title class_">Symbol</span>(<span class="string">"level"</span>)]:<span class="string">"有钱"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>symbol属性不能被for…in获取</p></li><li><p>以及Object.keys()，Object.getOwnPropertyNames()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> pro <span class="keyword">in</span> student){</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pro); <span class="comment">//只输出两个key：name和age</span></span><br><span class="line">  }</span><br><span class="line">  <span class="comment">//下面俩都是输出[name,age]这个数组</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Objcet</span>.<span class="title function_">keys</span>(student));</span><br><span class="line">  <span class="keyword">let</span> pros = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(student);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pros)</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>如何拿到Symbol的值</p><ul><li>通过Object.getOwnPropertySymbols()拿到Symbol属性名</li><li>再通过for…of得到每个属性名</li></ul> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symList = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(student);</span><br><span class="line"><span class="comment">//symList:[Symbol("level"),Symbol("level")]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> symList){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student[pro]);<span class="comment">//优秀，有点</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 内置值</span><br><span class="line">   - <span class="title class_">Symbol</span>.<span class="property">iterator</span>：对象被<span class="keyword">for</span>...<span class="keyword">of</span>循环时，会调用<span class="title class_">Symbol</span>.<span class="property">iterator</span>方法，返回该对象的默认遍历器</span><br><span class="line">   <span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">   const list = [1,2,3,4,5,6];</span></span><br><span class="line"><span class="string">   console.log(student[Symbol.iterator]);//undefined</span></span><br><span class="line"><span class="string">   console.log(list[Symbol.iterator]);//f values(){[native code]}</span></span><br><span class="line"><span class="string">   //如果对象有Symbol.iterator这个属性</span></span><br><span class="line"><span class="string">   //这个对象就可以被for...of遍历</span></span><br><span class="line"><span class="string">   for(let item of student){</span></span><br><span class="line"><span class="string">   console.log(item);//报错，student is not a iterator</span></span><br><span class="line"><span class="string">   }</span></span><br><span class="line"><span class="string">   for(let item of list){</span></span><br><span class="line"><span class="string">   console.log(item);//1,2,3,4,5,6</span></span><br><span class="line"><span class="string">   }</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="回调地狱与promise"><a href="#回调地狱与promise" class="headerlink" title="回调地狱与promise"></a>回调地狱与promise</h2><h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取奶茶,火锅的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTea</span>(<span class="params">fn</span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">"奶茶"</span>)</span><br><span class="line">},<span class="number">1000</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHotpot</span>(<span class="params">fn</span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">"火锅"</span>)</span><br><span class="line">},<span class="number">2000</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//调用获取奶茶的方法，回调函数获取数据值</span></span><br><span class="line"><span class="comment">//getTea(function(data){</span></span><br><span class="line"><span class="comment">//  console.log(data);</span></span><br><span class="line"><span class="comment">//})</span></span><br><span class="line"><span class="comment">//要求：先吃火锅，然后喝奶茶(顺序)</span></span><br><span class="line"><span class="title function_">getHotpot</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="title function_">getTea</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  })</span><br><span class="line">})</span><br><span class="line"><span class="comment">//实现第2秒吃火锅，再过1秒喝奶茶</span></span><br><span class="line"><span class="comment">//需要层层嵌套，以后数据多了，维护性很差，这叫回调地狱</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ol><li>Promise是一个构造函数<ul><li>我们可以创建Promise的实例const p = new Promise()</li><li>new出来的Promise实例对象，代表一个异步操作</li></ul></li><li>Promise.prototype上包含一个.then()方法<ul><li>每一次new Promise()构造函数得到的实例对象</li><li>都可以通过原型链的方式访问到.then()方法，例如p.then()</li></ul></li><li>.then()方法用来预先指定成功和失败的回调函数<ul><li>p.then(成功的回调函数, 失败的回调函数)</li><li>p.then(result =&gt;{ }, error =&gt;{ })</li><li>调用.then()方法时，成功的回调函数是必选的，失败的回调函数是可选的</li></ul></li></ol><h4 id="Promise的状态"><a href="#Promise的状态" class="headerlink" title="Promise的状态"></a>Promise的状态</h4><blockquote><p>实例对象中的一个属性 [PromiseState]</p><ul><li>pending 未决定的</li><li>resolved / fullfilled 成功</li><li>rejected 失败</li></ul></blockquote><h4 id="Promise对象的值"><a href="#Promise对象的值" class="headerlink" title="Promise对象的值"></a>Promise对象的值</h4><blockquote><p>实例对象中的另一个属性[PromiseResult]，保存着对象【成功/失败】的结果</p><ul><li>resolve</li><li>reject</li></ul></blockquote><h4 id="Promise工作流程"><a href="#Promise工作流程" class="headerlink" title="Promise工作流程"></a>Promise工作流程</h4><img src="../imgs/promise流程.png"><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ol><li><p>Promise构造函数：Promise(executor){}</p><ul><li>executor函数：执行器  (resolve,reject) =&gt; {}</li><li>resolve函数：内部定义成功时我们调用的函数 value =&gt;{}</li><li>reject函数：内部定义失败时我们调用的函数 reason =&gt; {}</li></ul><blockquote><p>说明：executor会在Promise内部立即同步调用，异步操作会在执行器中执行</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>{</span><br><span class="line"><span class="comment">//同步调用</span></span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">"ok"</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">})</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line"><span class="comment">//111</span></span><br><span class="line"><span class="comment">//222</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Promise.prototype.catch方法：(onRejected) =&gt; {}</p><ul><li>onRejected函数：失败的回调函数 (reason) =&gt; {}</li></ul></li><li><p>Promise.resolve方法：(value) =&gt; {}</p><ul><li>value：成功的数据或promise对象</li><li>说明：返回一个成功/失败的promise对象</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">521</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="comment">//如果传入的参数为 非Promise类型的对象，则返回的结果为成功promise对象</span></span><br><span class="line"><span class="comment">//如果传入的参数为Promise对象，则参数的结果决定了resolve的结果</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> {</span><br><span class="line"><span class="comment">//resolve('OK');</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">'Error'</span>)</span><br><span class="line">}))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span>=&gt;</span>{</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p>Promise.reject方法：(reason) =&gt; {}</p><ul><li>reason：失败的原因</li><li>说明：返回一个失败的promise对象</li></ul></li></ol><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//resolve可以把异步数据传递出来</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>){</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">"hello world"</span>)</span><br><span class="line">})</span><br><span class="line"><span class="comment">//通过then拿到异步数据</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data) <span class="comment">//hello world</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>那么就可以改造刚刚的函数了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取奶茶,火锅的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTea</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">"奶茶"</span>)</span><br><span class="line">},<span class="number">1000</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHotpot</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">"火锅"</span>)</span><br><span class="line">},<span class="number">2000</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"><span class="comment">//先吃火锅，再喝奶茶</span></span><br><span class="line"><span class="title function_">getHotpot</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">getTea</span>();<span class="comment">//再return一个Promise对象</span></span><br><span class="line">}).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><h4 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h4><ol><li><p>函数的返回值为promise对象</p></li><li><p>promise对象的结果由async函数执行的返回值决定</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与then的返回结果一样</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>){</span><br><span class="line"><span class="comment">//1.async function main() {</span></span><br><span class="line">    <span class="comment">//1.如果返回值是一个非Promise类型的数据,返回成功对象，返回结果就是这个值</span></span><br><span class="line">    <span class="comment">// return 521</span></span><br><span class="line">    <span class="comment">//2.如果返回值是一个Promise对象，成功则成功，失败则失败</span></span><br><span class="line">    <span class="comment">// return new Promise((resolve,reject)=&gt;{</span></span><br><span class="line">    <span class="comment">//     //resolve('OK')</span></span><br><span class="line">    <span class="comment">//     reject('error');</span></span><br><span class="line">    <span class="comment">// })</span></span><br><span class="line">    <span class="comment">//3.抛出异常，返回失败，返回结果就是这个值</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'On No'</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">main</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><ol><li><p>await右侧的表达式一般为promise对象，但也可以是其它的值</p></li><li><p>如果表达式是promise对象，await返回的是promise成功的值</p></li><li><p>如果表达式是其他值，则将此值作为await的返回值</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">'OK'</span>)</span><br><span class="line">        <span class="comment">// reject('error');</span></span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">await</span> <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">'error'</span>);</span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">let</span> res3 = <span class="keyword">await</span> p2;</span><br><span class="line">    } <span class="keyword">catch</span> (e) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>await必须写在async函数中，但async函数中可以没有await</li><li>如果await的promise失败了，就会抛出异常，需要通过try…catch捕获处理</li></ol><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><blockquote><p>虽然promise解决了回调地狱的通点，好了很多，但还是不友好，那么用async函数就可以更好的解决啦</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取奶茶,火锅的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTea</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">"奶茶"</span>)</span><br><span class="line">},<span class="number">1000</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getHotpot</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">"火锅"</span>)</span><br><span class="line">},<span class="number">2000</span>)</span><br><span class="line">})</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>){</span><br><span class="line"><span class="comment">//直接获取resolve传递出来的异步数据</span></span><br><span class="line"><span class="keyword">let</span> hotPot = <span class="keyword">await</span> <span class="title function_">getHotpot</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hotPot);</span><br><span class="line"><span class="keyword">let</span> tea = <span class="keyword">await</span> <span class="title function_">getTea</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tea);</span><br><span class="line"><span class="comment">//这两个函数还是刚刚改造好的，返回的是Promise对象</span></span><br><span class="line"><span class="comment">//这样看起来就跟同步代码一样，更清爽了</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript_ES6新特性(1)</title>
      <link href="/undefined/40125.html"/>
      <url>/undefined/40125.html</url>
      
        <content type="html"><![CDATA[<h2 id="let与const的用法"><a href="#let与const的用法" class="headerlink" title="let与const的用法"></a>let与const的用法</h2><ol><li><p>let和var的区别</p><blockquote><p>var定义的变量没有块级作用域的概念</p><p>let定义的变量有块级作用域</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>){</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); </span><br><span class="line"><span class="comment">//这时候是可以输出a的，如果换成let，是会报错的，因为受块级作用域的影响，a变成了局部变量</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>let和var哪个好？</p><blockquote><p>let好，所以放弃使用var。</p></blockquote></li><li><p>const的使用</p><blockquote><p>定义的变量不能被修改，但是如果定义的是对象，那么里面的属性值可以修改，只是不能修改整个对象，同样的还要数组也是一样，然后const也是有块级作用域的</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>; <span class="comment">//定义不修改的常量</span></span><br><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line"><span class="attr">name</span>:<span class="string">"小明"</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">16</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//obj = {name:"小红"}  //会报错</span></span><br><span class="line"><span class="keyword">const</span>.<span class="property">name</span> = <span class="string">"小红"</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//结果name为小红，属性值被修改</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h2><ol><li><p>数组的结构赋值</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b] = [<span class="number">10</span>,<span class="number">20</span>] <span class="comment">//实现了赋值，a=10，b=20</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>用法：比如实现一个交换，让a=20，b=10，传统方法会有一个临时变量temp进行保存其中一个值，然后进行交换，但如果用结构赋值会简单很多</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b] = [<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)  <span class="comment">//输出结果：20 10</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>对象的结构赋值（常用）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> {name,age} = {</span><br><span class="line"><span class="attr">name</span>:<span class="string">"小明"</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">16</span>,</span><br><span class="line">    <span class="attr">friend</span>:<span class="string">"小红"</span></span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//小明</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">//16</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createStudent</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"小明"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">let</span> friend = <span class="string">"小红"</span>;</span><br><span class="line"><span class="keyword">return</span>{</span><br><span class="line"><span class="attr">name</span>:name,</span><br><span class="line"><span class="attr">age</span>:age,</span><br><span class="line"><span class="attr">friend</span>:friend</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//let obj = createStudent();</span></span><br><span class="line"><span class="comment">//console.log(obj.name) //Es5写法，拿到'name'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {name} = <span class="title function_">createStudent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">//Es6写法，代码简洁明了</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="箭头函数的用法"><a href="#箭头函数的用法" class="headerlink" title="箭头函数的用法"></a>箭头函数的用法</h2><ul><li>()中定义参数，如果只有一个参数，可以不写括号</li><li>{}中写函数体，如果函数体中只有返回值，可以不写return</li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const fun1 = x =&gt; x; //只有一个参数</span></span><br><span class="line"><span class="comment">//const fun = function(){</span></span><br><span class="line"><span class="comment">//return 100;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params"></span>) =&gt; <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>());</span><br><span class="line"><span class="comment">//两者的作用是一样的</span></span><br></pre></td></tr></tbody></table></figure><p>箭头函数和普通函数的区别：</p><blockquote><p>this指向不同<br>普通函数，谁调用这个函数，this就指向谁<br>箭头函数，在哪里定义函数，this就指向谁</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line"><span class="attr">name</span>:<span class="string">"小明"</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">16</span>,</span><br><span class="line"><span class="comment">//  sayName(){</span></span><br><span class="line"><span class="comment">//console.log(this.name)//这里this可以输出小明，下面就不能了</span></span><br><span class="line"><span class="comment">//setTimeout(function(){</span></span><br><span class="line"><span class="comment">//console.log('我是${this.name}')//这个this指向window</span></span><br><span class="line">    <span class="comment">//Es6模板字符串，跟"我是"+this.name相同</span></span><br><span class="line"><span class="comment">//},500)</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>{</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">//this指向obj，可以输出name</span></span><br><span class="line">},<span class="number">500</span>)</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><blockquote><p>ES6引入rest参数，用于获取函数的实参，用来代替arguements</p></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5获取实参的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params"></span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">//这里输出{0:零,1:一,2:二}这个'对象'</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">data</span>(<span class="string">'零'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>);</span><br><span class="line"><span class="comment">//rest参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params">...args</span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args);<span class="comment">//这里则输出的是数组</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">data</span>(<span class="string">'零'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//rest参数必须要放到最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...args</span>){ <span class="comment">//如果放前边会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//[3,4,5,6]</span></span><br><span class="line">}</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="拓展运算符"><a href="#拓展运算符" class="headerlink" title="拓展运算符"></a>拓展运算符</h2><ol><li><p>介绍</p><blockquote><p>‘…’ 拓展运算符能将 ‘数组’ 转化为逗号分隔的参数序列</p></blockquote></li><li><p>作用</p><ul><li><p>数组的合并</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = [<span class="string">'一'</span>,<span class="string">'二'</span>];</span><br><span class="line"><span class="keyword">const</span> two = [<span class="string">'三'</span>,<span class="string">'四'</span>];</span><br><span class="line"><span class="keyword">const</span> h = [...one,...two];<span class="comment">//输出['一','二','三','四']</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>数组的克隆</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = [<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>];</span><br><span class="line"><span class="keyword">const</span> two = [...one];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line"><span class="comment">//这只是个浅拷贝</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>将伪数组转换为真正的数组</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如html有3个div标签</span></span><br><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span><br><span class="line"><span class="comment">//不过有rest参数的存在，没有必要把它作转换</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><blockquote><p>迭代器(iterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署iterator接口，就可以完成遍历操作。</p><p>1）ES6创造了一种新的遍历命令for…of循环，iterator主要供for…of消费</p><p>2）原生具备iterator接口的数据（可用for…of遍历）</p><ol><li>Array</li><li>Arguments </li><li>Set</li><li>Map </li><li>String</li><li>TypeArray</li><li>NodeList</li></ol><p>3）工作原理</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li></ol></blockquote><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">'唐僧'</span>,<span class="string">'孙悟空'</span>,<span class="string">'猪八戒'</span>,<span class="string">'沙僧'</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiyou)<span class="comment">//往下翻，里面会有一个Symbol.iterator方法</span></span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">//调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//{value:'唐僧',done:false}</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//{value:'孙悟空',done:false}</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//{value:'猪八戒',done:false}</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//{value:'沙僧',done:false}</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//{value:undefined,done:true}</span></span><br></pre></td></tr></tbody></table></figure><p>应用-自定义遍历数据(迭代器原理)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line"><span class="keyword">const</span> banji = {</span><br><span class="line"><span class="attr">name</span>:<span class="string">"终极一班"</span>,</span><br><span class="line"><span class="attr">stus</span>:[</span><br><span class="line"><span class="string">'xiaoming'</span>,</span><br><span class="line"><span class="string">'xiaoning'</span>,</span><br><span class="line"><span class="string">'xiaotian'</span>,</span><br><span class="line"><span class="string">'knight'</span></span><br><span class="line">],</span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">iterator</span>](){</span><br><span class="line"><span class="comment">//索引变量</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">_this = <span class="variable language_">this</span>; <span class="comment">//也可以用箭头函数</span></span><br><span class="line"><span class="keyword">return</span>{</span><br><span class="line"><span class="attr">next</span>:<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">if</span>(index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>){</span><br><span class="line"><span class="keyword">const</span> result = {<span class="attr">value</span>:_this.<span class="property">stus</span>[index],<span class="attr">done</span>:<span class="literal">false</span>};</span><br><span class="line"><span class="comment">//下标自增</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> {<span class="attr">value</span>:<span class="literal">undefined</span>,<span class="attr">done</span>:<span class="literal">true</span>};</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//banji.stus.forEach()可以得到，但是不符合面向对象的思想</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> banji){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><ol><li><p>函数声明与调用</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="comment">//异步编程 纯回调函数 node fs ajax mongodb</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"hello generator"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">//这样才能console.log上面的内容</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>函数代码分隔符yield</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'一只没有耳朵'</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'一只没有尾巴'</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">'真奇怪'</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">//111</span></span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">//222</span></span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">//333</span></span><br><span class="line">iterator.<span class="title function_">next</span>();<span class="comment">//444</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>()){</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>生成器函数的参数传递</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">arg</span>){</span><br><span class="line"><span class="variable language_">console</span>,<span class="title function_">log</span>(arg);<span class="comment">//AAA</span></span><br><span class="line"><span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one);<span class="comment">//BBB</span></span><br><span class="line"><span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one);<span class="comment">//CCC</span></span><br><span class="line"><span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(one);<span class="comment">//DDD</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//执行获取迭代器对象</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">'AAA'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">//next方法可以传入实参</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">'BBB'</span>));作为第<span class="number">1</span>个<span class="keyword">yield</span>的整体返回值</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">'CCC'</span>));作为第<span class="number">2</span>个<span class="keyword">yield</span>的整体返回值</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">'DDD'</span>));作为第<span class="number">3</span>个<span class="keyword">yield</span>的整体返回值</span><br></pre></td></tr></tbody></table></figure></li><li><p>生成器实例</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步编程</span></span><br><span class="line"><span class="comment">//1s后控制台输出111 2s后输出222</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">iterator.<span class="title function_">next</span>(); <span class="comment">//接着向下遍历实现实例</span></span><br><span class="line">},<span class="number">1000</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>){</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>{</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">},<span class="number">2000</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>){</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ES6新特性 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
